{
  "version": 3,
  "file": "gitHubRequest.js",
  "sourceRoot": "",
  "sources": [
    "../src/gitHubRequest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as https from \"https\"\r\nimport { RequestOptions } from \"https\"\r\nimport { IncomingMessage, ClientRequest } from \"http\"\r\nimport { addTimeOutHandler } from \"./httpRequest\"\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\n\r\nconst __awaiter = require(\"./awaiter\")\r\nArray.isArray(__awaiter)\r\n\r\nexport function gitHubRequest<T>(path: string, token: string | null, data: { [name: string]: any; } | null = null, method: string = \"GET\"): BluebirdPromise<T> {\r\n  const options: any = {\r\n    hostname: \"api.github.com\",\r\n    path: path,\r\n    method: method,\r\n    headers: {\r\n      Accept: \"application/vnd.github.v3+json\",\r\n      \"User-Agent\": \"electron-builder\",\r\n    }\r\n  }\r\n\r\n  const encodedData = data == null ? null : new Buffer(JSON.stringify(data))\r\n  if (encodedData != null) {\r\n    options.method = \"post\"\r\n    options.headers[\"Content-Type\"] = \"application/json\"\r\n    options.headers[\"Content-Length\"] = encodedData.length\r\n  }\r\n  return doGitHubRequest<T>(options, token, it => it.end(encodedData))\r\n}\r\n\r\nexport function doGitHubRequest<T>(options: RequestOptions, token: string | null, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): BluebirdPromise<T> {\r\n  if (token != null) {\r\n    (<any>options.headers).authorization = \"token \" + token\r\n  }\r\n\r\n  return new BluebirdPromise<T>((resolve, reject, onCancel) => {\r\n    const request = https.request(options, (response: IncomingMessage) => {\r\n      try {\r\n        if (response.statusCode === 404) {\r\n          // error is clear, we don't need to read detailed error description\r\n          reject(new HttpError(response, `method: ${options.method} url: https://${options.hostname}${options.path}\r\n\r\nPlease double check that your GitHub Token is correct. Due to security reasons GitHub doesn't report actual status, but 404.\r\n`))\r\n        }\r\n        else if (response.statusCode === 204) {\r\n          // on DELETE request\r\n          resolve()\r\n          return\r\n        }\r\n\r\n        let data = \"\"\r\n        response.setEncoding(\"utf8\")\r\n        response.on(\"data\", (chunk: string) => {\r\n          data += chunk\r\n        })\r\n\r\n        response.on(\"end\", () => {\r\n          try {\r\n            if (response.statusCode >= 400) {\r\n              if (response.headers[\"content-type\"].includes(\"json\")) {\r\n                reject(new HttpError(response, JSON.parse(data)))\r\n              }\r\n              else {\r\n                reject(new HttpError(response))\r\n              }\r\n            }\r\n            else {\r\n              resolve(data.length === 0 ? null : JSON.parse(data))\r\n            }\r\n          }\r\n          catch (e) {\r\n            reject(e)\r\n          }\r\n        })\r\n      }\r\n      catch (e) {\r\n        reject(e)\r\n      }\r\n    })\r\n    addTimeOutHandler(request, reject)\r\n    request.on(\"error\", reject)\r\n    requestProcessor(request, reject)\r\n    onCancel!(() => request.abort())\r\n  })\r\n}\r\n\r\nexport class HttpError extends Error {\r\n  constructor(public response: IncomingMessage, public description: any = null) {\r\n    super(response.statusCode + \" \" + response.statusMessage + (description == null ? \"\" : (\"\\n\" + JSON.stringify(description, <any>null, \"  \"))) + \"\\nHeaders: \" + JSON.stringify(response.headers, <any>null, \"  \"))\r\n  }\r\n}"
  ]
}
