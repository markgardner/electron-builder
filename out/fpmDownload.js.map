{
  "version": 3,
  "file": "fpmDownload.js",
  "sourceRoot": "",
  "sources": [
    "../src/fpmDownload.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { statOrNull, spawn, debug, debug7zArgs, getTempName } from \"./util\"\r\nimport { writeFile, rename, remove, unlink, emptyDir } from \"fs-extra-p\"\r\nimport { download } from \"./httpRequest\"\r\nimport { path7za } from \"7zip-bin\"\r\nimport * as path from \"path\"\r\nimport { homedir } from \"os\"\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __awaiter = require(\"./awaiter\")\r\n\r\nconst versionToPromise = new Map<string, BluebirdPromise<string>>()\r\n\r\n// can be called in parallel, all calls for the same version will get the same promise - will be downloaded only once\r\nexport function downloadFpm(version: string, osAndArch: string): Promise<string> {\r\n  let promise = versionToPromise.get(version)\r\n  // if rejected, we will try to download again\r\n  if (<any>promise != null && !promise!.isRejected()) {\r\n    return promise!\r\n  }\r\n\r\n  promise = <BluebirdPromise<string>>doDownloadFpm(version, osAndArch)\r\n  versionToPromise.set(version, promise)\r\n  return promise\r\n}\r\n\r\nasync function doDownloadFpm(version: string, osAndArch: string): Promise<string> {\r\n  const dirName = `fpm-${version}-${osAndArch}`\r\n  const url = `https://github.com/develar/fpm-self-contained/releases/download/v${version}/${dirName}.7z`\r\n\r\n  // we cache in the global location - in the home dir, not in the node_modules/.cache (https://www.npmjs.com/package/find-cache-dir) because\r\n  // * don't need to find node_modules\r\n  // * don't pollute user project dir (important in case of 1-package.json project structure)\r\n  // * simplify/speed-up tests (don't download fpm for each test project)\r\n  const cacheDir = path.join(homedir(), \".cache\", \"fpm\")\r\n  const fpmDir = path.join(cacheDir, dirName)\r\n\r\n  const fpmDirStat = await statOrNull(fpmDir)\r\n  if (fpmDirStat != null && fpmDirStat.isDirectory()) {\r\n    debug(`Found existing fpm ${fpmDir}`)\r\n    return path.join(fpmDir, \"fpm\")\r\n  }\r\n\r\n  // 7z cannot be extracted from the input stream, temp file is required\r\n  const tempUnpackDir = path.join(cacheDir, getTempName())\r\n  const archiveName = `${tempUnpackDir}.7z`\r\n  debug(`Download fpm from ${url} to ${archiveName}`)\r\n  // 7z doesn't create out dir\r\n  await emptyDir(tempUnpackDir)\r\n  await download(url, archiveName, false)\r\n\r\n  await spawn(path7za, debug7zArgs(\"x\").concat(archiveName, `-o${tempUnpackDir}`), {\r\n    cwd: cacheDir,\r\n    stdio: [\"ignore\", debug.enabled ? \"inherit\" : \"ignore\", \"inherit\"],\r\n  })\r\n\r\n  await BluebirdPromise.all([\r\n    rename(path.join(tempUnpackDir, dirName), fpmDir)\r\n      .catch(e => {\r\n        console.warn(\"Cannot move downloaded fpm into final location (another process downloaded faster?): \" + e)\r\n      }),\r\n    unlink(archiveName),\r\n  ])\r\n  await BluebirdPromise.all([\r\n    remove(tempUnpackDir),\r\n    writeFile(path.join(fpmDir, \".lastUsed\"), Date.now().toString())\r\n  ])\r\n\r\n  debug(`fpm downloaded to ${fpmDir}`)\r\n  return path.join(fpmDir, \"fpm\")\r\n}"
  ]
}
