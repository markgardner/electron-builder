{
  "version": 3,
  "file": "cleanup.js",
  "sourceRoot": "",
  "sources": [
    "../src/cleanup.ts"
  ],
  "names": [],
  "mappings": ";;;AAEA,qBAAwB,AAAI,AAC5B,AAAC;AAAD,6BAAwD,AAAY,AACpE,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAE5B,AAAmC,AACnC,AAAC;;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AAEtC;;AACE,cAAM,AAAG,MAAG,AAAI,KAAC,AAAI,KAAC,KAAO,AAAE,WAAE,AAAQ,UAAE,AAAK,AAAC;AACjD,YAAI,AAAK,QAAoB,AAAI;AACjC,YAAI,AAAC;AACH,AAAK,oBAAG,MAAM,aAAO,QAAC,AAAG,AAAC,AAC5B;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,sBAAM,AAAC,AACT;AAAC;AACD,AAAM,AACR;AAAC;AAED,yBAAqB,QAAC,AAAG,IAAC,AAAK,AAA2C,OAAQ,AAAE,EAAT;AACzE,gBAAI,AAAI,OAAiB,AAAI;AAC7B,kBAAM,AAAQ,WAAG,AAAI,KAAC,AAAI,KAAC,AAAG,KAAE,AAAE,AAAC;AACnC,gBAAI,AAAC;AACH,AAAI,uBAAG,MAAM,aAAK,MAAC,AAAQ,AAAC,AAC9B;AACA,cAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,0BAAM,AAAC,AACT;AAAC;AACD,AAAM,AACR;AAAC;AAED,AAAE,AAAC,gBAAC,CAAC,AAAK,KAAC,AAAW,AAAE,iBAAI,AAAC,EAAC,MAAM,AAAc,eAAC,AAAQ,AAAC,AAAC,AAAC,YAAC,AAAC;AAC9D,AAAO,wBAAC,AAAG,IAAC,kBAAiB,AAAQ,UAAE,AAAC;AACxC,sBAAM,aAAM,OAAC,AAAQ,AAAC,AACxB;AAAC,AACH;AAAC,AAAC,AAAC,UAjBG;AAmBN,cAAM,WAAe,QAAC,AAAG,IAAC,AAAK,OAAE,aAAM,AAAC,AAC1C;AAAC;AAAA;AAED,wBAA8B,AAAW;;AACvC,YAAI,AAAC;AACH,kBAAM,AAAQ,WAAG,AAAQ,UAAC,MAAM,aAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAG,KAAE,AAAW,AAAC,cAAE,AAAM,AAAC,UAAE,AAAE,AAAC;AAClF,AAAE,AAAC,gBAAC,CAAC,AAAK,MAAC,AAAQ,AAAC,aAAK,AAAI,KAAC,AAAG,AAAE,QAAG,AAAQ,AAAC,AAAG,QAA1B,GAA2B,AAAO,UAAG,AAAC,AAAC,AAAC,GAAC,AAAC;AAChE,AAAM,uBAAC,AAAI,AACb;AAAC,AACH;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,sBAAM,AAAC,AACT;AAAC,AACH;AAAC;AAED,AAAM,eAAC,AAAK,AACd;AAAC;AAAA;AAED,AAAI,AAAE",
  "sourcesContent": [
    "#! /usr/bin/env node\r\n\r\nimport { homedir } from \"os\"\r\nimport { readdir, lstat, Stats, remove, readFile } from \"fs-extra-p\"\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\nimport * as path from \"path\"\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __awaiter = require(\"./awaiter\")\r\n\r\nasync function main() {\r\n  const dir = path.join(homedir(), \".cache\", \"fpm\")\r\n  let items: string[] | null = null\r\n  try {\r\n    items = await readdir(dir)\r\n  }\r\n  catch (e) {\r\n    if (e.code !== \"ENOENT\") {\r\n      throw e\r\n    }\r\n    return\r\n  }\r\n\r\n  await BluebirdPromise.map(items, <(item: string) => BluebirdPromise<any>> (async (it) => {\r\n    let stat: Stats | null = null\r\n    const itemPath = path.join(dir, it)\r\n    try {\r\n      stat = await lstat(itemPath)\r\n    }\r\n    catch (e) {\r\n      if (e.code !== \"ENOENT\") {\r\n        throw e\r\n      }\r\n      return\r\n    }\r\n\r\n    if (!stat!.isDirectory() || !(await isRecentlyUsed(itemPath))) {\r\n      console.log(`remove unused ${itemPath}`)\r\n      await remove(itemPath)\r\n    }\r\n  }))\r\n\r\n  await BluebirdPromise.map(items, remove)\r\n}\r\n\r\nasync function isRecentlyUsed(dir: string) {\r\n  try {\r\n    const lastUsed = parseInt(await readFile(path.join(dir, \".lastUsed\"), \"utf8\"), 10)\r\n    if (!isNaN(lastUsed) && (Date.now() - lastUsed) < (3600000 * 2)) {\r\n      return true\r\n    }\r\n  }\r\n  catch (e) {\r\n    if (e.code !== \"ENOENT\") {\r\n      throw e\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nmain()"
  ]
}
