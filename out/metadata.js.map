{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "",
  "sources": [
    "../src/metadata.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { ElectronPackagerOptions } from \"electron-packager-tf\"\r\nimport { AsarOptions } from \"asar\"\r\n\r\nexport interface Metadata {\r\n  readonly repository?: string | RepositoryInfo | null\r\n}\r\n\r\n/*\r\n # Application `package.json`\r\n */\r\nexport interface AppMetadata extends Metadata {\r\n  readonly version: string\r\n\r\n  /*\r\n   The application name.\r\n   */\r\n  readonly name: string\r\n\r\n  /*\r\n   As [name](#AppMetadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters\r\n   not allowed in the [name property](https://docs.npmjs.com/files/package.json#name}).\r\n   */\r\n  readonly productName?: string | null\r\n\r\n  /*\r\n   The application description.\r\n   */\r\n  readonly description: string\r\n\r\n  readonly main?: string | null\r\n\r\n  readonly author: AuthorMetadata\r\n\r\n  /*\r\n   The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\r\n\r\n   If not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.\r\n   */\r\n  readonly homepage?: string | null\r\n\r\n  /*\r\n   *linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.\r\n   */\r\n  readonly license?: string | null\r\n}\r\n\r\n/*\r\n # Development `package.json`\r\n */\r\nexport interface DevMetadata extends Metadata {\r\n  /*\r\n   See [.build](#BuildMetadata).\r\n   */\r\n  readonly build: BuildMetadata\r\n\r\n  // deprecated\r\n  readonly homepage?: string | null\r\n\r\n  // deprecated\r\n  readonly license?: string | null\r\n\r\n  /*\r\n   See [.directories](#MetadataDirectories)\r\n   */\r\n  readonly directories?: MetadataDirectories | null\r\n}\r\n\r\nexport interface RepositoryInfo {\r\n  readonly url: string\r\n}\r\n\r\nexport interface AuthorMetadata {\r\n  readonly name: string\r\n  readonly email: string\r\n}\r\n\r\nexport type CompressionLevel = \"store\" | \"normal\" | \"maximum\"\r\n\r\n/*\r\n ## `.build`\r\n */\r\nexport interface BuildMetadata {\r\n  /*\r\n   *OS X-only.* The app bundle ID. See [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070).\r\n   */\r\n  readonly \"app-bundle-id\"?: string | null\r\n  /*\r\n   *OS X-only.* The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\r\n\r\n   For example, `app-category-type=public.app-category.developer-tools` will set the application category to *Developer Tools*.\r\n\r\n   Valid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).\r\n   */\r\n  readonly \"app-category-type\"?: string | null\r\n\r\n  /*\r\n   Whether to package the application's source code into an archive, using [Electron's archive format](https://github.com/electron/asar). Defaults to `true`.\r\n   Reasons why you may want to disable this feature are described in [an application packaging tutorial in Electron's documentation](http://electron.atom.io/docs/latest/tutorial/application-packaging/#limitations-on-node-api/).\r\n\r\n   Or you can pass object of any asar options.\r\n   */\r\n  readonly asar?: AsarOptions | boolean | null\r\n\r\n  // deprecated\r\n  readonly iconUrl?: string | null\r\n\r\n  /*\r\n   See [AppMetadata.productName](#AppMetadata-productName).\r\n   */\r\n  readonly productName?: string | null\r\n\r\n  /**\r\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the [app directory](#MetadataDirectories-app), which specifies which files to include when copying files to create the package. Defaults to `\\*\\*\\/\\*` (i.e. [hidden files are ignored by default](https://www.npmjs.com/package/glob#dots)).\r\n\r\n   Development dependencies are never copied in any case. You don't need to ignore it explicitly.\r\n\r\n   [Multiple patterns](#multiple-glob-patterns) are supported. You can use `${os}` (expanded to osx, linux or win according to current platform) and `${arch}` in the pattern.\r\n   If directory matched, all contents are copied. So, you can just specify `foo` to copy `foo` directory.\r\n\r\n   Remember that default pattern `\\*\\*\\/\\*` is not added to your custom, so, you have to add it explicitly â€” e.g. `[\"\\*\\*\\/\\*\", \"!ignoreMe${/\\*}\"]`.\r\n\r\n   May be specified in the platform options (e.g. in the `build.osx`).\r\n   */\r\n  readonly files?: Array<string> | string | null\r\n\r\n  /**\r\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for OS X, `resources` for Linux/Windows).\r\n\r\n   Glob rules the same as for [files](#BuildMetadata-files).\r\n   */\r\n  readonly extraResources?: Array<string> | string | null\r\n\r\n  /**\r\n   The same as [extraResources](#BuildMetadata-extraResources) but copy into the app's content directory (`Contents` for OS X, root directory for Linux/Windows).\r\n   */\r\n  readonly extraFiles?: Array<string> | string | null\r\n\r\n  /*\r\n   See [.build.osx](#OsXBuildOptions).\r\n   */\r\n  readonly osx?: OsXBuildOptions | null\r\n\r\n  /*\r\n   See [.build.mas](#MasBuildOptions).\r\n   */\r\n  readonly mas?: MasBuildOptions | null\r\n\r\n  /**\r\n   See [.build.win](#LinuxBuildOptions).\r\n   */\r\n  readonly win?: WinBuildOptions  | null\r\n\r\n  /*\r\n   See [.build.linux](#LinuxBuildOptions).\r\n   */\r\n  readonly linux?: LinuxBuildOptions | null\r\n\r\n  /*\r\n   The compression level, one of `store`, `normal`, `maximum` (default: `normal`). If you want to rapidly test build, `store` can reduce build time significantly.\r\n   */\r\n  readonly compression?: CompressionLevel | null\r\n\r\n  readonly \"build-version\"?: string | null\r\n\r\n  /*\r\n   *programmatic API only* The function to be run after pack (but before pack into distributable format and sign). Promise must be returned.\r\n   */\r\n  readonly afterPack?: (context: AfterPackContext) => Promise<any> | null\r\n\r\n  // /*\r\n  //  Whether to [prune](https://docs.npmjs.com/cli/prune) dependencies (`npm prune --production`) before starting to package the app.\r\n  //  Defaults to `false`.\r\n  //  */\r\n  // readonly npmPrune?: boolean\r\n  // deprecated\r\n  // readonly prune?: boolean\r\n\r\n  /*\r\n   Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies (`npm rebuild`) before starting to package the app. Defaults to `true`.\r\n   */\r\n  readonly npmRebuild?: boolean\r\n}\r\n\r\nexport interface AfterPackContext {\r\n  readonly appOutDir: string\r\n  readonly options: ElectronPackagerOptions\r\n}\r\n\r\n/*\r\n ### `.build.osx`\r\n\r\n See all [appdmg options](https://www.npmjs.com/package/appdmg#json-specification).\r\n */\r\nexport interface OsXBuildOptions extends PlatformSpecificBuildOptions {\r\n  /*\r\n   The path to DMG icon, which will be shown when mounted. Defaults to `build/icon.icns`.\r\n   */\r\n  readonly icon?: string | null\r\n\r\n  /*\r\n   The path to background (default: `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\r\n   If background is not specified, use `window.size`, see [specification](https://github.com/LinusU/node-appdmg#json-specification).\r\n   */\r\n  readonly background?: string | null\r\n\r\n  /*\r\n   Target package type: list of `default`, `dmg`, `mas`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`. Defaults to `default` (dmg and zip for Squirrel.Mac).\r\n  */\r\n  readonly target?: Array<string> | null\r\n\r\n  /*\r\n   The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](https://github.com/electron-userland/electron-builder/wiki/Code-Signing).\r\n   MAS installer identity is specified in the [.build.mas](#MasBuildOptions-identity).\r\n   */\r\n  readonly identity?: string | null\r\n\r\n  /*\r\n   The path to entitlements file for signing the app. `build/entitlements.osx.plist` will be used if exists (it is a recommended way to set).\r\n   MAS entitlements is specified in the [.build.mas](#MasBuildOptions-entitlements).\r\n   */\r\n  readonly entitlements?: string | null\r\n\r\n  /*\r\n   The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.osx.inherit.plist` will be used if exists (it is a recommended way to set).\r\n   Otherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\r\n\r\n   This option only applies when signing with `entitlements` provided.\r\n   */\r\n  readonly entitlementsInherit?: string | null\r\n}\r\n\r\n/*\r\n ### `.build.mas`\r\n\r\n MAS (Mac Application Store) specific options (in addition to `build.osx`).\r\n */\r\nexport interface MasBuildOptions extends OsXBuildOptions {\r\n  /*\r\n   The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set).\r\n   Otherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist).\r\n   */\r\n  readonly entitlements?: string | null\r\n\r\n  /*\r\n   The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set).\r\n   Otherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist).\r\n   */\r\n  readonly entitlementsInherit?: string | null\r\n}\r\n\r\n/*\r\n ### `.build.win`\r\n */\r\nexport interface WinBuildOptions extends PlatformSpecificBuildOptions {\r\n  readonly certificateFile?: string\r\n  readonly certificatePassword?: string\r\n\r\n  /*\r\n   Target package type: list of `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`. Defaults to `squirrel`.\r\n  */\r\n  readonly target?: Array<string> | null\r\n\r\n  /*\r\n   A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\r\n\r\n   Please note â€” [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\r\n\r\n   * If you don't plan to build windows installer, you can omit it.\r\n   * If your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.\r\n   */\r\n  readonly iconUrl?: string | null\r\n\r\n  /*\r\n   The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\r\n   (otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).\r\n   */\r\n  readonly loadingGif?: string | null\r\n\r\n  /*\r\n   Whether to create an MSI installer. Defaults to `false` (MSI is not created).\r\n   */\r\n  readonly msi?: boolean\r\n\r\n  /*\r\n   A URL to your existing updates. If given, these will be downloaded to create delta updates.\r\n   */\r\n  readonly remoteReleases?: string | null\r\n\r\n  /*\r\n   Authentication token for remote updates\r\n   */\r\n  readonly remoteToken?: string | null\r\n\r\n  /*\r\n   Array of signing algorithms used. Defaults to `['sha1', 'sha256']`\r\n   */\r\n  readonly signingHashAlgorithms?: Array<string> | null\r\n  readonly signcodePath?: string | null\r\n}\r\n\r\n/*\r\n ### `.build.linux`\r\n */\r\nexport interface LinuxBuildOptions extends PlatformSpecificBuildOptions {\r\n  /*\r\n   As [description](#AppMetadata-description) from application package.json, but allows you to specify different for Linux.\r\n   */\r\n  description?: string | null\r\n\r\n  /*\r\n   *deb-only.* The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).\r\n   */\r\n  synopsis?: string | null\r\n\r\n  /*\r\n   The maintainer. Defaults to [author](#AppMetadata-author).\r\n   */\r\n  maintainer?: string | null\r\n\r\n  /*\r\n   The vendor. Defaults to [author](#AppMetadata-author).\r\n   */\r\n  vendor?: string | null\r\n\r\n  // should be not documented, only to experiment\r\n  fpm?: Array<string> | null\r\n\r\n  //.desktop file template\r\n  desktop?: string | null\r\n\r\n  afterInstall?: string | null\r\n  afterRemove?: string | null\r\n\r\n  /*\r\n  *deb-only.* The compression type, one of `gz`, `bzip2`, `xz`. Defaults to `xz`.\r\n   */\r\n  readonly compression?: string | null\r\n\r\n  /*\r\n   Package dependencies. Defaults to `[\"libappindicator1\", \"libnotify-bin\"]`.\r\n   */\r\n  readonly depends?: string[] | null\r\n\r\n  /*\r\n   Target package type: list of `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`. Defaults to `deb`.\r\n\r\n   The most effective [xz](https://en.wikipedia.org/wiki/Xz) compression format used by default.\r\n\r\n   Only `deb` is tested. Feel free to file issues for `rpm` and other package formats.\r\n   */\r\n  readonly target?: Array<string> | null\r\n}\r\n\r\n/*\r\n ## `.directories`\r\n */\r\nexport interface MetadataDirectories {\r\n  /*\r\n   The path to build resources, defaults to `build`.\r\n   */\r\n  readonly buildResources?: string | null\r\n\r\n  /*\r\n   The output directory, defaults to `dist`.\r\n   */\r\n  readonly output?: string | null\r\n\r\n  /*\r\n   The application directory (containing the application package.json), defaults to `app`, `www` or working directory.\r\n   */\r\n  readonly app?: string | null\r\n}\r\n\r\nexport interface PlatformSpecificBuildOptions {\r\n  readonly files?: Array<string> | null\r\n  readonly extraFiles?: Array<string> | null\r\n  readonly extraResources?: Array<string> | null\r\n\r\n  readonly asar?: AsarOptions | boolean\r\n\r\n  readonly target?: Array<string> | null\r\n}\r\n\r\nexport class Platform {\r\n  static OSX = new Platform(\"osx\", \"osx\", \"darwin\")\r\n  static LINUX = new Platform(\"linux\", \"linux\", \"linux\")\r\n  static WINDOWS = new Platform(\"windows\", \"win\", \"win32\")\r\n\r\n  constructor(public name: string, public buildConfigurationKey: string, public nodeName: string) {\r\n  }\r\n\r\n  toString() {\r\n    return this.name\r\n  }\r\n\r\n  toJSON() {\r\n    return this.name\r\n  }\r\n\r\n  createTarget(type?: string | Array<string> | null, ...archs: Array<Arch>): Map<Platform, Map<Arch, Array<string>>> {\r\n    const archToType = new Map()\r\n    if (this === Platform.OSX) {\r\n      archs = [Arch.x64]\r\n    }\r\n\r\n    for (let arch of (archs == null || archs.length === 0 ? [archFromString(process.arch)] : archs)) {\r\n      archToType.set(arch, type == null ? [] : (Array.isArray(type) ? type : [type]))\r\n    }\r\n    return new Map([[this, archToType]])\r\n  }\r\n\r\n  static current(): Platform {\r\n    return Platform.fromString(process.platform)\r\n  }\r\n\r\n  static fromString(name: string): Platform {\r\n    switch (name) {\r\n      case Platform.OSX.nodeName:\r\n      case Platform.OSX.name:\r\n        return Platform.OSX\r\n\r\n      case Platform.WINDOWS.nodeName:\r\n      case Platform.WINDOWS.name:\r\n      case Platform.WINDOWS.buildConfigurationKey:\r\n        return Platform.WINDOWS\r\n\r\n      case Platform.LINUX.nodeName:\r\n        return Platform.LINUX\r\n    }\r\n\r\n    throw new Error(\"Unknown platform: \" + name)\r\n  }\r\n}\r\n\r\nexport enum Arch {\r\n  ia32, x64\r\n}\r\n\r\nexport function archFromString(name: string): Arch {\r\n  if (name === \"x64\") {\r\n    return Arch.x64\r\n  }\r\n  if (name === \"ia32\") {\r\n    return Arch.ia32\r\n  }\r\n\r\n  throw new Error(`Unsupported arch ${name}`)\r\n}\r\n\r\nexport function getProductName(metadata: AppMetadata, devMetadata: DevMetadata) {\r\n  return devMetadata.build.productName || metadata.productName || metadata.name\r\n}\r\n"
  ]
}
