{
  "version": 3,
  "file": "codeSign.js",
  "sourceRoot": "",
  "sources": [
    "../src/codeSign.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { exec, getTempName } from \"./util\"\r\nimport { deleteFile, outputFile, copy, rename } from \"fs-extra-p\"\r\nimport { download } from \"./httpRequest\"\r\nimport { tmpdir } from \"os\"\r\nimport * as path from \"path\"\r\nimport { executeFinally, all } from \"./promise\"\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\nimport { randomBytes } from \"crypto\"\r\nimport { homedir } from \"os\"\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __awaiter = require(\"./awaiter\")\r\n\r\nexport const appleCertificatePrefixes = [\"Developer ID Application:\", \"3rd Party Mac Developer Application:\", \"Developer ID Installer:\", \"3rd Party Mac Developer Installer:\"]\r\n\r\nexport type CertType = \"Developer ID Application\" | \"3rd Party Mac Developer Application\" | \"Developer ID Installer\" | \"3rd Party Mac Developer Installer\"\r\n\r\nexport interface CodeSigningInfo {\r\n  name: string\r\n  keychainName?: string | null\r\n\r\n  installerName?: string | null\r\n}\r\n\r\nexport function generateKeychainName(): string {\r\n  return path.join(tmpdir(), getTempName(\"csc\") + \".keychain\")\r\n}\r\n\r\nfunction downloadUrlOrBase64(urlOrBase64: string, destination: string): BluebirdPromise<any> {\r\n  if (urlOrBase64.startsWith(\"https://\")) {\r\n    return download(urlOrBase64, destination)\r\n  }\r\n  else {\r\n    return outputFile(destination, new Buffer(urlOrBase64, \"base64\"))\r\n  }\r\n}\r\n\r\nlet bundledCertKeychainAdded: Promise<any> | null = null\r\n\r\n// \"Note that filename will not be searched to resolve the signing identity's certificate chain unless it is also on the user's keychain search list.\"\r\n// but \"security list-keychains\" doesn't support add - we should 1) get current list 2) set new list - it is very bad http://stackoverflow.com/questions/10538942/add-a-keychain-to-search-list\r\n// \"overly complicated and introduces a race condition.\"\r\n// https://github.com/electron-userland/electron-builder/issues/398\r\nasync function createCustomCertKeychain() {\r\n  // copy to temp and then atomic rename to final path\r\n  const tmpKeychainPath = path.join(homedir(), \".cache\", getTempName(\"electron_builder_root_certs\"))\r\n  const keychainPath = path.join(homedir(), \".cache\", \"electron_builder_root_certs.keychain\")\r\n  const results = await BluebirdPromise.all<string>([\r\n    exec(\"security\", [\"list-keychains\"]),\r\n    copy(path.join(__dirname, \"..\", \"certs\", \"root_certs.keychain\"), tmpKeychainPath)\r\n      .then(() => rename(tmpKeychainPath, keychainPath)),\r\n  ])\r\n  const list = results[0]\r\n    .split(\"\\n\")\r\n    .map(it => {\r\n      let r = it.trim()\r\n      return r.substring(1, r.length - 1)\r\n    })\r\n    .filter(it => it.length > 0)\r\n\r\n  if (!list.includes(keychainPath)) {\r\n    await exec(\"security\", [\"list-keychains\", \"-d\", \"user\", \"-s\", keychainPath].concat(list))\r\n  }\r\n}\r\n\r\nexport async function createKeychain(keychainName: string, cscLink: string, cscKeyPassword: string, cscILink?: string | null, cscIKeyPassword?: string | null): Promise<CodeSigningInfo> {\r\n  if (bundledCertKeychainAdded == null) {\r\n    bundledCertKeychainAdded = createCustomCertKeychain()\r\n  }\r\n  await bundledCertKeychainAdded\r\n\r\n  const certLinks = [cscLink]\r\n  if (cscILink != null) {\r\n    certLinks.push(cscILink)\r\n  }\r\n\r\n  const certPaths = new Array(certLinks.length)\r\n  const keychainPassword = randomBytes(8).toString(\"hex\")\r\n  return await executeFinally(BluebirdPromise.all([\r\n      BluebirdPromise.map(certLinks, (link, i) => {\r\n        const tempFile = path.join(tmpdir(), `${getTempName()}.p12`)\r\n        certPaths[i] = tempFile\r\n        return downloadUrlOrBase64(link, tempFile)\r\n      }),\r\n      BluebirdPromise.mapSeries([\r\n        [\"create-keychain\", \"-p\", keychainPassword, keychainName],\r\n        [\"unlock-keychain\", \"-p\", keychainPassword, keychainName],\r\n        [\"set-keychain-settings\", \"-t\", \"3600\", \"-u\", keychainName]\r\n      ], it => exec(\"security\", it))\r\n    ])\r\n    .then(() => importCerts(keychainName, certPaths, <Array<string>>[cscKeyPassword, cscIKeyPassword].filter(it => it != null))),\r\n    errorOccurred => {\r\n      const tasks = certPaths.map(it => deleteFile(it, true))\r\n      if (errorOccurred) {\r\n        tasks.push(deleteKeychain(keychainName))\r\n      }\r\n      return all(tasks)\r\n    })\r\n}\r\n\r\nasync function importCerts(keychainName: string, paths: Array<string>, keyPasswords: Array<string>): Promise<CodeSigningInfo> {\r\n  const namePromises: Array<Promise<string>> = []\r\n  for (let i = 0; i < paths.length; i++) {\r\n    const password = keyPasswords[i]\r\n    const certPath = paths[i]\r\n    await exec(\"security\", [\"import\", certPath, \"-k\", keychainName, \"-T\", \"/usr/bin/codesign\", \"-T\", \"/usr/bin/productbuild\", \"-P\", password])\r\n\r\n    namePromises.push(extractCommonName(password, certPath))\r\n  }\r\n\r\n  const names = await BluebirdPromise.all(namePromises)\r\n  return {\r\n    name: names[0],\r\n    installerName: names.length > 1 ? names[1] : null,\r\n    keychainName: keychainName,\r\n  }\r\n}\r\n\r\nfunction extractCommonName(password: string, certPath: string): BluebirdPromise<string> {\r\n  return exec(\"openssl\", [\"pkcs12\", \"-nokeys\", \"-nodes\", \"-passin\", \"pass:\" + password, \"-nomacver\", \"-clcerts\", \"-in\", certPath])\r\n    .then(result => {\r\n      const match = <Array<string | null> | null>(result.match(/^subject.*\\/CN=([^\\/\\n]+)/m))\r\n      if (match == null || match[1] == null) {\r\n        throw new Error(\"Cannot extract common name from p12\")\r\n      }\r\n      else {\r\n        return match[1]!\r\n      }\r\n    })\r\n}\r\n\r\nexport function sign(path: string, options: CodeSigningInfo): BluebirdPromise<any> {\r\n  const args = [\"--deep\", \"--force\", \"--sign\", options.name, path]\r\n  if (options.keychainName != null) {\r\n    args.push(\"--keychain\", options.keychainName)\r\n  }\r\n  return exec(\"codesign\", args)\r\n}\r\n\r\nexport function deleteKeychain(keychainName: string, ignoreNotFound: boolean = true): BluebirdPromise<any> {\r\n  const result = exec(\"security\", [\"delete-keychain\", keychainName])\r\n  if (ignoreNotFound) {\r\n    return result.catch(error => {\r\n      if (!error.message.includes(\"The specified keychain could not be found.\")) {\r\n        throw error\r\n      }\r\n    })\r\n  }\r\n  else {\r\n    return result\r\n  }\r\n}\r\n\r\nexport function downloadCertificate(cscLink: string): Promise<string> {\r\n  const certPath = path.join(tmpdir(), `${getTempName()}.p12`)\r\n  return downloadUrlOrBase64(cscLink, certPath)\r\n    .thenReturn(certPath)\r\n}\r\n\r\nexport let findIdentityRawResult: Promise<string> | null = null\r\n\r\nexport async function findIdentity(namePrefix: CertType, qualifier?: string): Promise<string | null> {\r\n  if (findIdentityRawResult == null) {\r\n    // https://github.com/electron-userland/electron-builder/issues/481\r\n    findIdentityRawResult = exec(\"security\", [\"find-identity\", \"-v\", \"-p\", \"codesigning\", \"-p\", \"appleID\"])\r\n  }\r\n\r\n  // https://github.com/electron-userland/electron-builder/issues/484\r\n  const lines = (await findIdentityRawResult)\r\n    .trim()\r\n    .split(\"\\n\")\r\n    .filter(it => !it.includes(\"(Missing required extension)\") && !it.includes(\"valid identities found\") && !it.includes(\"iPhone \"))\r\n\r\n  for (let line of lines) {\r\n    if (qualifier != null && !line.includes(qualifier)) {\r\n      continue\r\n    }\r\n\r\n    if (line.includes(namePrefix)) {\r\n      return line.substring(line.indexOf('\"') + 1, line.lastIndexOf('\"'))\r\n    }\r\n  }\r\n\r\n  if (namePrefix === \"Developer ID Application\") {\r\n    // find non-Apple certificate\r\n    // https://github.com/electron-userland/electron-builder/issues/458\r\n    l: for (let line of lines) {\r\n      if (qualifier != null && !line.includes(qualifier)) {\r\n        continue\r\n      }\r\n\r\n      for (let prefix of appleCertificatePrefixes) {\r\n        if (line.includes(prefix)) {\r\n          continue l\r\n        }\r\n      }\r\n\r\n      return line.substring(line.indexOf('\"') + 1, line.lastIndexOf('\"'))\r\n    }\r\n  }\r\n  return null\r\n}"
  ]
}
