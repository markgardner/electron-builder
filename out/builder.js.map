{
  "version": 3,
  "file": "builder.js",
  "sourceRoot": "",
  "sources": [
    "../src/builder.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Packager, normalizePlatforms } from \"./packager\"\r\nimport { PackagerOptions } from \"./platformPackager\"\r\nimport { PublishOptions, Publisher, GitHubPublisher } from \"./gitHubPublisher\"\r\nimport { executeFinally } from \"./promise\"\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\nimport { InfoRetriever } from \"./repositoryInfo\"\r\nimport { log, warn, isEmptyOrSpaces } from \"./util\"\r\nimport { Platform, Arch, archFromString } from \"./metadata\"\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __awaiter = require(\"./awaiter\")\r\n\r\nexport async function createPublisher(packager: Packager, options: PublishOptions, repoSlug: InfoRetriever, isPublishOptionGuessed: boolean = false): Promise<Publisher | null> {\r\n  const info = await repoSlug.getInfo(packager)\r\n  if (info == null) {\r\n    if (isPublishOptionGuessed) {\r\n      return null\r\n    }\r\n\r\n    warn(\"Cannot detect repository by .git/config\")\r\n    throw new Error(`Please specify 'repository' in the dev package.json ('${packager.devPackageFile}')`)\r\n  }\r\n  else {\r\n    log(`Creating Github Publisher â€” user: ${info.user}, project: ${info.project}, version: ${packager.metadata.version}`)\r\n    return new GitHubPublisher(info.user, info.project, packager.metadata.version, options, options.publish!)\r\n  }\r\n}\r\n\r\nexport interface BuildOptions extends PackagerOptions, PublishOptions {\r\n}\r\n\r\nexport interface CliOptions extends PackagerOptions, PublishOptions {\r\n  osx?: Array<string>\r\n  linux?: Array<string>\r\n  win?: Array<string>\r\n\r\n  arch?: string\r\n\r\n  x64?: boolean\r\n  ia32?: boolean\r\n\r\n  platform?: string\r\n}\r\n\r\nfunction addValue<K, T>(map: Map<K, Array<T>>, key: K, value: T) {\r\n  const list = map.get(key)\r\n  if (list == null) {\r\n    map.set(key, [value])\r\n  }\r\n  else {\r\n    list.push(value)\r\n  }\r\n}\r\n\r\nexport function normalizeOptions(args: CliOptions): BuildOptions {\r\n  if (args.targets != null) {\r\n    return args\r\n  }\r\n\r\n  let targets = new Map<Platform, Map<Arch, Array<string>>>()\r\n\r\n  function processTargets(platform: Platform, types: Array<string>) {\r\n    if (args.platform != null) {\r\n      throw new Error(`--platform cannot be used if --${platform.buildConfigurationKey} is passed`)\r\n    }\r\n    if (args.arch != null) {\r\n      throw new Error(`--arch cannot be used if --${platform.buildConfigurationKey} is passed`)\r\n    }\r\n\r\n    function commonArch(): Array<Arch> {\r\n      if (args.ia32 && args.x64) {\r\n        return [Arch.x64, Arch.ia32]\r\n      }\r\n      else if (args.ia32) {\r\n        return [Arch.ia32]\r\n      }\r\n      else if (args.x64) {\r\n        return [Arch.x64]\r\n      }\r\n      else {\r\n        return [archFromString(process.arch)]\r\n      }\r\n    }\r\n\r\n    let archToType = targets.get(platform)\r\n    if (archToType == null) {\r\n      archToType = new Map<Arch, Array<string>>()\r\n      targets.set(platform, archToType)\r\n    }\r\n\r\n    if (types.length === 0) {\r\n      if (platform === Platform.OSX) {\r\n        archToType.set(Arch.x64, [])\r\n      }\r\n      else {\r\n        for (let arch of commonArch()) {\r\n          archToType.set(arch, [])\r\n        }\r\n      }\r\n      return\r\n    }\r\n\r\n    for (let type of types) {\r\n      let arch: string\r\n      if (platform === Platform.OSX) {\r\n        arch = \"x64\"\r\n        addValue(archToType, Arch.x64, type)\r\n      }\r\n      else {\r\n        const suffixPos = type.lastIndexOf(\":\")\r\n        if (suffixPos > 0) {\r\n          addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\r\n        }\r\n        else {\r\n          for (let arch of commonArch()) {\r\n            addValue(archToType, arch, type)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (args.osx != null) {\r\n    processTargets(Platform.OSX, args.osx)\r\n  }\r\n\r\n  if (args.linux != null) {\r\n    processTargets(Platform.LINUX, args.linux)\r\n  }\r\n\r\n  if (args.win != null) {\r\n    processTargets(Platform.WINDOWS, args.win)\r\n  }\r\n\r\n  if (targets.size === 0) {\r\n    if (args.platform == null && args.arch == null) {\r\n      processTargets(Platform.current(), [])\r\n    }\r\n    else {\r\n      targets = createTargets(normalizePlatforms(args.platform), null, args.arch)\r\n    }\r\n  }\r\n\r\n  const result = Object.assign({}, args)\r\n  result.targets = targets\r\n\r\n  delete result.osx\r\n  delete result.linux\r\n  delete result.win\r\n  delete result.platform\r\n  delete result.arch\r\n\r\n  const r = <any>result\r\n  delete r.o\r\n  delete r.l\r\n  delete r.w\r\n  delete r.windows\r\n  delete r[\"$0\"]\r\n  delete r._\r\n  delete r.version\r\n  delete r.help\r\n\r\n  delete result.ia32\r\n  delete result.x64\r\n  return result\r\n}\r\n\r\nexport function createTargets(platforms: Array<Platform>, type?: string | null, arch?: string | null): Map<Platform, Map<Arch, Array<string>>> {\r\n  const targets = new Map<Platform, Map<Arch, Array<string>>>()\r\n  for (let platform of platforms) {\r\n    const archs = platform === Platform.OSX ? [Arch.x64] : (arch === \"all\" ? [Arch.x64, Arch.ia32] : [archFromString(arch == null ? process.arch : arch)])\r\n    const archToType = new Map<Arch, Array<string>>()\r\n    targets.set(platform, archToType)\r\n\r\n    for (let arch of archs) {\r\n      archToType.set(arch, type == null ? [] : [type])\r\n    }\r\n  }\r\n  return targets\r\n}\r\n\r\nexport async function build(rawOptions?: CliOptions): Promise<void> {\r\n  const options = normalizeOptions(rawOptions || {})\r\n\r\n  if (options.cscLink === undefined && !isEmptyOrSpaces(process.env.CSC_LINK)) {\r\n    options.cscLink = process.env.CSC_LINK\r\n  }\r\n  if (options.cscKeyPassword === undefined && !isEmptyOrSpaces(process.env.CSC_KEY_PASSWORD)) {\r\n    options.cscKeyPassword = process.env.CSC_KEY_PASSWORD\r\n  }\r\n  if (options.githubToken === undefined && !isEmptyOrSpaces(process.env.GH_TOKEN)) {\r\n    options.githubToken = process.env.GH_TOKEN\r\n  }\r\n\r\n  if (options.draft === undefined && !isEmptyOrSpaces(process.env.EP_DRAFT)) {\r\n    options.draft = process.env.EP_DRAFT.toLowerCase() === \"true\"\r\n  }\r\n  if (options.prerelease === undefined && !isEmptyOrSpaces(process.env.EP_PRELEASE)) {\r\n    options.prerelease = process.env.EP_PRELEASE.toLowerCase() === \"true\"\r\n  }\r\n\r\n  let isPublishOptionGuessed = false\r\n  if (options.publish === undefined) {\r\n    if (process.env.npm_lifecycle_event === \"release\") {\r\n      options.publish = \"always\"\r\n    }\r\n    else if (options.githubToken != null) {\r\n      const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG\r\n      if (tag != null && tag.length !== 0) {\r\n        log(\"Tag %s is defined, so artifacts will be published\", tag)\r\n        options.publish = \"onTag\"\r\n        isPublishOptionGuessed = true\r\n      }\r\n      else if ((process.env.CI || \"\").toLowerCase() === \"true\") {\r\n        log(\"CI detected, so artifacts will be published if draft release exists\")\r\n        options.publish = \"onTagOrDraft\"\r\n        isPublishOptionGuessed = true\r\n      }\r\n    }\r\n  }\r\n\r\n  const publishTasks: Array<BluebirdPromise<any>> = []\r\n  const repositoryInfo = new InfoRetriever()\r\n  const packager = new Packager(options, repositoryInfo)\r\n  if (options.publish != null && options.publish !== \"never\") {\r\n    let publisher: Promise<Publisher> | null = null\r\n    packager.artifactCreated(event => {\r\n      if (publisher == null) {\r\n        publisher = createPublisher(packager, options, repositoryInfo, isPublishOptionGuessed)\r\n      }\r\n\r\n      if (publisher) {\r\n        publisher\r\n          .then(it => publishTasks.push(<BluebirdPromise<any>>it.upload(event.file, event.artifactName)))\r\n      }\r\n    })\r\n  }\r\n\r\n  await executeFinally(packager.build(), errorOccurred => {\r\n    if (errorOccurred) {\r\n      for (let task of publishTasks) {\r\n        task!.cancel()\r\n      }\r\n      return BluebirdPromise.resolve(null)\r\n    }\r\n    else {\r\n      return BluebirdPromise.all(publishTasks)\r\n    }\r\n  })\r\n}\r\n"
  ]
}
