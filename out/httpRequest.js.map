{
  "version": 3,
  "file": "httpRequest.js",
  "sourceRoot": "",
  "sources": [
    "../src/httpRequest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Socket } from \"net\"\r\nimport { IncomingMessage, ClientRequest } from \"http\"\r\nimport * as https from \"https\"\r\nimport { createWriteStream, ensureDir } from \"fs-extra-p\"\r\nimport { parse as parseUrl } from \"url\"\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\nimport * as path from \"path\"\r\n\r\nconst maxRedirects = 10\r\n\r\nexport const download = <(url: string, destination: string, isCreateDir?: boolean | undefined) => BluebirdPromise<any>>(BluebirdPromise.promisify(_download))\r\n\r\nfunction _download(url: string, destination: string, isCreateDir: boolean | undefined, callback: (error: Error) => void): void {\r\n  if (callback == null) {\r\n    callback = <any>isCreateDir\r\n    isCreateDir = true\r\n  }\r\n  doDownload(url, destination, 0, isCreateDir === undefined ? true : isCreateDir, callback)\r\n}\r\n\r\nexport function addTimeOutHandler(request: ClientRequest, callback: (error: Error) => void) {\r\n  request.on(\"socket\", function (socket: Socket) {\r\n    socket.setTimeout(60 * 1000, () => {\r\n      callback(new Error(\"Request timed out\"))\r\n      request.abort()\r\n    })\r\n  })\r\n}\r\n\r\nfunction doDownload(url: string, destination: string, redirectCount: number, isCreateDir: boolean, callback: (error: Error) => void) {\r\n  const ensureDirPromise = isCreateDir ? ensureDir(path.dirname(destination)) : BluebirdPromise.resolve()\r\n\r\n  const parsedUrl = parseUrl(url)\r\n  // user-agent must be specified, otherwise some host can return 401 unauthorised\r\n  const request = https.request({\r\n    hostname: parsedUrl.hostname,\r\n    path: parsedUrl.path,\r\n    headers: {\r\n      \"User-Agent\": \"electron-builder\"\r\n    }\r\n  }, (response: IncomingMessage) => {\r\n    if (response.statusCode >= 400) {\r\n      callback(new Error(\"Request error, status \" + response.statusCode + \": \" + response.statusMessage))\r\n      return\r\n    }\r\n\r\n    const redirectUrl = response.headers.location\r\n    if (redirectUrl != null) {\r\n      if (redirectCount < maxRedirects) {\r\n        doDownload(redirectUrl, destination, redirectCount++, isCreateDir, callback)\r\n      }\r\n      else {\r\n        callback(new Error(\"Too many redirects (> \" + maxRedirects + \")\"))\r\n      }\r\n      return\r\n    }\r\n\r\n    ensureDirPromise\r\n      .then(() => {\r\n        const downloadStream = createWriteStream(destination)\r\n        response.pipe(downloadStream)\r\n        downloadStream.on(\"finish\", () => downloadStream.close(callback))\r\n      })\r\n      .catch(callback)\r\n\r\n    let ended = false\r\n    response.on(\"end\", () => {\r\n      ended = true\r\n    })\r\n\r\n    response.on(\"close\", () => {\r\n      if (!ended) {\r\n        callback(new Error(\"Request aborted\"))\r\n      }\r\n    })\r\n  })\r\n  addTimeOutHandler(request, callback)\r\n  request.on(\"error\", callback)\r\n  request.end()\r\n}"
  ]
}
