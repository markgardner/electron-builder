{
  "version": 3,
  "file": "linuxPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/linuxPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as path from \"path\"\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\nimport { PlatformPackager, BuildInfo, smarten, getArchSuffix } from \"./platformPackager\"\r\nimport { Platform, LinuxBuildOptions, Arch } from \"./metadata\"\r\nimport { exec, debug, use, getTempName } from \"./util\"\r\nimport { outputFile, readFile, remove, readdir, emptyDir } from \"fs-extra-p\"\r\nimport { downloadFpm } from \"./fpmDownload\"\r\nimport { tmpdir } from \"os\"\r\nconst template = require(\"lodash.template\")\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __awaiter = require(\"./awaiter\")\r\n\r\nconst installPrefix = \"/opt\"\r\n\r\nexport class LinuxPackager extends PlatformPackager<LinuxBuildOptions> {\r\n  private readonly buildOptions: LinuxBuildOptions\r\n\r\n  private readonly packageFiles: Promise<Array<string>>\r\n  private readonly scriptFiles: Promise<Array<string>>\r\n\r\n  private readonly fpmPath: Promise<string>\r\n\r\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\r\n    super(info)\r\n\r\n    this.buildOptions = Object.assign({\r\n      name: this.metadata.name,\r\n      description: this.metadata.description,\r\n    }, this.customBuildOptions)\r\n\r\n    if (!this.hasOnlyDirTarget()) {\r\n      const tempDir = path.join(tmpdir(), getTempName(\"electron-builder-linux\"))\r\n      const tempDirPromise = emptyDir(tempDir)\r\n        .then(() => {\r\n          cleanupTasks.push(() => remove(tempDir))\r\n          return tempDir\r\n        })\r\n      this.packageFiles = this.computePackageFiles(tempDirPromise)\r\n      this.scriptFiles = this.createScripts(tempDirPromise)\r\n\r\n      if (process.platform === \"win32\" || process.env.USE_SYSTEM_FPM === \"true\") {\r\n        this.fpmPath = BluebirdPromise.resolve(\"fpm\")\r\n      }\r\n      else {\r\n        this.fpmPath = downloadFpm(process.platform === \"darwin\" ? \"1.5.1-20150715-2.2.2\" : \"1.5.0-2.3.1\", process.platform === \"darwin\" ? \"osx\" : `linux-x86${process.arch === \"ia32\" ? \"\" : \"_64\"}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  get supportedTargets(): Array<string> {\r\n    return [\"deb\", \"rpm\", \"sh\", \"freebsd\", \"pacman\", \"apk\", \"p5p\"]\r\n  }\r\n\r\n  get platform() {\r\n    return Platform.LINUX\r\n  }\r\n\r\n  private async computePackageFiles(tempDirPromise: Promise<string>): Promise<Array<string>> {\r\n    const tempDir = await tempDirPromise\r\n\r\n    const promises: Array<Promise<Array<string>>> = []\r\n    if (this.customBuildOptions.desktop == null) {\r\n      promises.push(this.computeDesktopIconPath(tempDir))\r\n    }\r\n\r\n    promises.push(this.computeDesktop(tempDir))\r\n\r\n    return Array.prototype.concat.apply([], await BluebirdPromise.all(promises))\r\n  }\r\n\r\n  async pack(outDir: string, arch: Arch, targets: Array<string>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\r\n    const appOutDir = this.computeAppOutDir(outDir, arch)\r\n    await this.doPack(this.computePackOptions(outDir, appOutDir, arch), outDir, appOutDir, arch, this.customBuildOptions)\r\n\r\n    postAsyncTasks.push(this.packageInDistributableFormat(outDir, appOutDir, arch, targets))\r\n  }\r\n\r\n  private async computeDesktop(tempDir: string): Promise<Array<string>> {\r\n    const tempFile = path.join(tempDir, this.appName + \".desktop\")\r\n    await outputFile(tempFile, this.buildOptions.desktop || `[Desktop Entry]\r\nName=${this.appName}\r\nComment=${this.buildOptions.description}\r\nExec=\"${installPrefix}/${this.appName}/${this.appName}\"\r\nTerminal=false\r\nType=Application\r\nIcon=${this.metadata.name}\r\n`)\r\n    return [`${tempFile}=/usr/share/applications/${this.appName}.desktop`]\r\n  }\r\n\r\n  // must be name without spaces and other special characters, but not product name used\r\n  private async computeDesktopIconPath(tempDir: string): Promise<Array<string>> {\r\n    try {\r\n      const mappings: Array<string> = []\r\n      const pngIconsDir = path.join(this.buildResourcesDir, \"icons\")\r\n      for (let file of (await readdir(pngIconsDir))) {\r\n        if (file!.endsWith(\".png\") || file!.endsWith(\".PNG\")) {\r\n          // If parseInt encounters a character that is not a numeral in the specified radix,\r\n          // it returns the integer value parsed up to that point\r\n          try {\r\n            const size = parseInt(file!, 10)\r\n            if (size > 0) {\r\n              mappings.push(`${pngIconsDir}/${file}=/usr/share/icons/hicolor/${size}x${size}/apps/${this.metadata.name}.png`)\r\n            }\r\n          }\r\n          catch (e) {\r\n            console.error(e)\r\n          }\r\n        }\r\n      }\r\n\r\n      return mappings\r\n    }\r\n    catch (e) {\r\n      return this.createFromIcns(tempDir)\r\n    }\r\n  }\r\n\r\n  private async createFromIcns(tempDir: string): Promise<Array<string>> {\r\n    const output = await exec(\"icns2png\", [\"-x\", \"-o\", tempDir, path.join(this.buildResourcesDir, \"icon.icns\")])\r\n    debug(output)\r\n\r\n    const imagePath = path.join(tempDir, \"icon_256x256x32.png\")\r\n\r\n    function resize(size: number): BluebirdPromise<any> {\r\n      const sizeArg = `${size}x${size}`\r\n      return exec(\"gm\", [\"convert\", \"-size\", sizeArg, imagePath, \"-resize\", sizeArg, path.join(tempDir, `icon_${size}x${size}x32.png`)])\r\n    }\r\n\r\n    const promises: Array<Promise<any>> = [resize(24), resize(96)]\r\n    if (!output.includes(\"is32\")) {\r\n      promises.push(resize(16))\r\n    }\r\n    if (!output.includes(\"ih32\")) {\r\n      promises.push(resize(48))\r\n    }\r\n    if (!output.toString().includes(\"icp6\")) {\r\n      promises.push(resize(64))\r\n    }\r\n    if (!output.includes(\"it32\")) {\r\n      promises.push(resize(128))\r\n    }\r\n\r\n    await BluebirdPromise.all(promises)\r\n\r\n    const appName = this.metadata.name\r\n\r\n    function createMapping(size: string) {\r\n      return `${tempDir}/icon_${size}x${size}x32.png=/usr/share/icons/hicolor/${size}x${size}/apps/${appName}.png`\r\n    }\r\n\r\n    return [\r\n      createMapping(\"16\"),\r\n      createMapping(\"24\"),\r\n      createMapping(\"32\"),\r\n      createMapping(\"48\"),\r\n      createMapping(\"64\"),\r\n      createMapping(\"96\"),\r\n      createMapping(\"128\"),\r\n      createMapping(\"256\"),\r\n      createMapping(\"512\"),\r\n    ]\r\n  }\r\n\r\n  private async createScripts(tempDirPromise: Promise<string>): Promise<Array<string>> {\r\n    const tempDir = await tempDirPromise\r\n    const defaultTemplatesDir = path.join(__dirname, \"..\", \"templates\", \"linux\")\r\n\r\n    const templateOptions = Object.assign({\r\n      // old API compatibility\r\n      executable: this.appName,\r\n    }, this.buildOptions)\r\n\r\n    const afterInstallTemplate = this.buildOptions.afterInstall || path.join(defaultTemplatesDir, \"after-install.tpl\")\r\n    const afterInstallFilePath = writeConfigFile(tempDir, afterInstallTemplate, templateOptions)\r\n\r\n    const afterRemoveTemplate = this.buildOptions.afterRemove || path.join(defaultTemplatesDir, \"after-remove.tpl\")\r\n    const afterRemoveFilePath = writeConfigFile(tempDir, afterRemoveTemplate, templateOptions)\r\n\r\n    return await BluebirdPromise.all<string>([afterInstallFilePath, afterRemoveFilePath])\r\n  }\r\n\r\n  protected async packageInDistributableFormat(outDir: string, appOutDir: string, arch: Arch, targets: Array<string>): Promise<any> {\r\n    // todo fix fpm - if run in parallel, get strange tar errors\r\n    for (let target of targets) {\r\n      target = target === \"default\" ? \"deb\" : target\r\n      if (target !== \"dir\" && target !== \"zip\" && target !== \"7z\" && !target.startsWith(\"tar.\")) {\r\n        const destination = path.join(outDir, `${this.metadata.name}-${this.metadata.version}${getArchSuffix(arch)}.${target}`)\r\n        await this.buildPackage(destination, target, this.buildOptions, appOutDir, arch)\r\n        this.dispatchArtifactCreated(destination)\r\n      }\r\n    }\r\n\r\n    const promises: Array<Promise<any>> = []\r\n    // https://github.com/electron-userland/electron-builder/issues/460\r\n    // for some reasons in parallel to fmp we cannot use tar\r\n    for (let target of targets) {\r\n      if (target === \"zip\" || target === \"7z\" || target.startsWith(\"tar.\")) {\r\n        const destination = path.join(outDir, `${this.metadata.name}-${this.metadata.version}${getArchSuffix(arch)}.${target}`)\r\n        promises.push(this.archiveApp(target, appOutDir, destination)\r\n          .then(() => this.dispatchArtifactCreated(destination)))\r\n      }\r\n    }\r\n\r\n    if (promises.length > 0) {\r\n      await BluebirdPromise.all(promises)\r\n    }\r\n  }\r\n\r\n  private async buildPackage(destination: string, target: string, options: LinuxBuildOptions, appOutDir: string, arch: Arch): Promise<any> {\r\n    const scripts = await this.scriptFiles\r\n\r\n    const projectUrl = await this.computePackageUrl()\r\n    if (projectUrl == null) {\r\n      throw new Error(\"Please specify project homepage, see https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata-homepage\")\r\n    }\r\n\r\n    const author = options.maintainer || `${this.metadata.author.name} <${this.metadata.author.email}>`\r\n    const synopsis = options.synopsis\r\n    const args = [\r\n      \"-s\", \"dir\",\r\n      \"-t\", target,\r\n      \"--architecture\", arch === Arch.ia32 ? \"i386\" : \"amd64\",\r\n      \"--name\", this.metadata.name,\r\n      \"--force\",\r\n      \"--after-install\", scripts[0],\r\n      \"--after-remove\", scripts[1],\r\n      \"--description\", smarten(target === \"rpm\" ? this.buildOptions.description! : `${synopsis || \"\"}\\n ${this.buildOptions.description}`),\r\n      \"--maintainer\", author,\r\n      \"--vendor\", options.vendor || author,\r\n      \"--version\", this.metadata.version,\r\n      \"--package\", destination,\r\n      \"--url\", projectUrl,\r\n    ]\r\n\r\n    if (target === \"deb\") {\r\n      args.push(\"--deb-compression\", options.compression || (this.devMetadata.build.compression === \"store\" ? \"gz\" : \"xz\"))\r\n    }\r\n    else if (target === \"rpm\") {\r\n      // args.push(\"--rpm-compression\", options.compression || (this.devMetadata.build.compression === \"store\" ? \"none\" : \"xz\"))\r\n      args.push(\"--rpm-os\", \"linux\")\r\n\r\n      if (synopsis != null) {\r\n        args.push(\"--rpm-summary\", smarten(synopsis))\r\n      }\r\n    }\r\n\r\n    let depends = options.depends\r\n    if (depends == null) {\r\n      depends = [\"libappindicator1\", \"libnotify-bin\"]\r\n    }\r\n    else if (!Array.isArray(depends)) {\r\n      if (typeof depends === \"string\") {\r\n        depends = [<string>depends]\r\n      }\r\n      else {\r\n        throw new Error(`depends must be Array or String, but specified as: ${depends}`)\r\n      }\r\n    }\r\n\r\n    for (let dep of depends) {\r\n      args.push(\"--depends\", dep)\r\n    }\r\n\r\n    use(this.metadata.license || this.devMetadata.license, it => args.push(\"--license\", it!))\r\n    use(this.computeBuildNumber(), it => args.push(\"--iteration\", it!))\r\n\r\n    use(options.fpm, it => args.push(...<any>it))\r\n\r\n    args.push(`${appOutDir}/=${installPrefix}/${this.appName}`)\r\n    args.push(...<any>(await this.packageFiles)!)\r\n    await exec(await this.fpmPath, args)\r\n  }\r\n}\r\n\r\nasync function writeConfigFile(tempDir: string, templatePath: string, options: any): Promise<string> {\r\n  const config = template(await readFile(templatePath, \"utf8\"),\r\n    {\r\n      // set interpolate explicitly to avoid troubles with templating of installer.nsi.tpl\r\n      interpolate: /<%=([\\s\\S]+?)%>/g\r\n    })(options)\r\n\r\n  const outputPath = path.join(tempDir, path.basename(templatePath, \".tpl\"))\r\n  await outputFile(outputPath, config)\r\n  return outputPath\r\n}\r\n"
  ]
}
