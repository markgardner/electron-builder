{
  "version": 3,
  "file": "repositoryInfo.js",
  "sourceRoot": "",
  "sources": [
    "../src/repositoryInfo.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { fromUrl as parseRepositoryUrl, Info } from \"hosted-git-info\"\r\nimport { readFile } from \"fs-extra-p\"\r\nimport { AppMetadata, Metadata } from \"./metadata\"\r\nimport * as path from \"path\"\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __awaiter = require(\"./awaiter\")\r\n\r\nexport interface ProjectMetadataProvider {\r\n  metadata: AppMetadata\r\n  devMetadata: Metadata\r\n}\r\n\r\nexport interface RepositorySlug {\r\n  user: string\r\n  project: string\r\n}\r\n\r\nexport class InfoRetriever {\r\n  _info: Promise<Info> | null\r\n\r\n  getInfo(provider?: ProjectMetadataProvider): Promise<Info | null> {\r\n    if (this._info == null) {\r\n      this._info = getInfo(provider)\r\n    }\r\n    return this._info\r\n  }\r\n}\r\n\r\nasync function getGitUrlFromGitConfig(): Promise<string | null> {\r\n  let data: string | null = null\r\n  try {\r\n    data = await readFile(path.join(\".git\", \"config\"), \"utf8\")\r\n  }\r\n  catch (e) {\r\n    if (e.code === \"ENOENT\") {\r\n      return null\r\n    }\r\n\r\n    throw e\r\n  }\r\n\r\n  const conf = data.split(/\\r?\\n/)\r\n  const i = conf.indexOf('[remote \"origin\"]')\r\n  if (i !== -1) {\r\n    let u = conf[i + 1]\r\n    if (!u.match(/^\\s*url =/)) {\r\n      u = conf[i + 2]\r\n    }\r\n\r\n    if (u.match(/^\\s*url =/)) {\r\n      return u.replace(/^\\s*url = /, \"\")\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nasync function getInfo(provider?: ProjectMetadataProvider | null): Promise<RepositorySlug | null> {\r\n  const repo = provider == null ? null : (provider.devMetadata.repository || provider.metadata.repository)\r\n  if (repo == null) {\r\n    let url = process.env.TRAVIS_REPO_SLUG\r\n    if (url == null) {\r\n      const user: string | null = process.env.APPVEYOR_ACCOUNT_NAME || process.env.CIRCLE_PROJECT_USERNAME\r\n      const project: string | null = process.env.APPVEYOR_PROJECT_NAME || process.env.CIRCLE_PROJECT_REPONAME\r\n      if (user != null && project != null) {\r\n        return {\r\n          user: user,\r\n          project: project,\r\n        }\r\n      }\r\n\r\n      url = await getGitUrlFromGitConfig()\r\n    }\r\n\r\n    if (url != null) {\r\n      return parseRepositoryUrl(url)\r\n    }\r\n  }\r\n  else {\r\n    return parseRepositoryUrl(typeof repo === \"string\" ? repo : repo.url)\r\n  }\r\n  return null\r\n}"
  ]
}
