{
  "version": 3,
  "file": "gitHubPublisher.js",
  "sourceRoot": "",
  "sources": [
    "../src/gitHubPublisher.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Release, Asset } from \"gh-release\"\r\nimport { log, warn, isEmptyOrSpaces } from \"./util\"\r\nimport { basename } from \"path\"\r\nimport { parse as parseUrl } from \"url\"\r\nimport * as mime from \"mime\"\r\nimport { stat } from \"fs-extra-p\"\r\nimport { createReadStream } from \"fs\"\r\nimport { gitHubRequest, HttpError, doGitHubRequest } from \"./gitHubRequest\"\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\nimport { ReadStream } from \"tty\"\r\nimport progressStream = require(\"progress-stream\")\r\nimport ProgressBar = require(\"progress\")\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __awaiter = require(\"./awaiter\")\r\n\r\nexport interface Publisher {\r\n  upload(file: string, artifactName?: string): Promise<any>\r\n}\r\n\r\nexport interface PublishOptions {\r\n  publish?: \"onTag\" | \"onTagOrDraft\" | \"always\" | \"never\" | null\r\n  githubToken?: string | null\r\n\r\n  draft?: boolean\r\n  prerelease?: boolean\r\n}\r\n\r\nexport class GitHubPublisher implements Publisher {\r\n  private tag: string\r\n  private _releasePromise: BluebirdPromise<Release>\r\n\r\n  private readonly token: string\r\n\r\n  get releasePromise(): Promise<Release | null> {\r\n    return this._releasePromise\r\n  }\r\n\r\n  constructor(private owner: string, private repo: string, version: string, private options: PublishOptions, private policy: string = \"always\") {\r\n    if (isEmptyOrSpaces(options.githubToken)) {\r\n      throw new Error(\"GitHub Personal Access Token is not specified\")\r\n    }\r\n\r\n    this.token = options.githubToken!\r\n\r\n    this.tag = \"v\" + version\r\n    this._releasePromise = <BluebirdPromise<Release>>this.init()\r\n  }\r\n\r\n  private async init(): Promise<Release | null> {\r\n    const createReleaseIfNotExists = this.policy !== \"onTagOrDraft\"\r\n    // we don't use \"Get a release by tag name\" because \"tag name\" means existing git tag, but we draft release and don't create git tag\r\n    const releases = await gitHubRequest<Array<Release>>(`/repos/${this.owner}/${this.repo}/releases`, this.token)\r\n    for (let release of releases) {\r\n      if (release.tag_name === this.tag) {\r\n        if (!release.draft) {\r\n          if (this.policy === \"onTag\") {\r\n            throw new Error(\"Release must be a draft\")\r\n          }\r\n          else {\r\n            const message = `Release ${this.tag} is not a draft, artifacts will be not published`\r\n            if (this.policy === \"always\") {\r\n              warn(message)\r\n            }\r\n            else {\r\n              log(message)\r\n            }\r\n            return null\r\n          }\r\n        }\r\n        return release!\r\n      }\r\n    }\r\n\r\n    if (createReleaseIfNotExists) {\r\n      log(\"Release %s doesn't exists, creating one\", this.tag)\r\n      return this.createRelease()\r\n    }\r\n    else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  async upload(file: string, artifactName?: string): Promise<void> {\r\n    const fileName = artifactName || basename(file)\r\n    const release = await this.releasePromise\r\n    if (release == null) {\r\n      return\r\n    }\r\n\r\n    const parsedUrl = parseUrl(release.upload_url.substring(0, release.upload_url.indexOf(\"{\")) + \"?name=\" + fileName)\r\n    const fileStat = await stat(file)\r\n    let badGatewayCount = 0\r\n    uploadAttempt: for (let i = 0; i < 3; i++) {\r\n      const progressBar = (<ReadStream>process.stdin).isTTY ? new ProgressBar(`Uploading ${fileName} [:bar] :percent :etas`, {\r\n        total: fileStat.size,\r\n        incomplete: \" \",\r\n        stream: process.stdout,\r\n        width: 20,\r\n      }) : null\r\n\r\n      try {\r\n        return await doGitHubRequest<any>({\r\n          hostname: parsedUrl.hostname,\r\n          path: parsedUrl.path,\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/vnd.github.v3+json\",\r\n            \"User-Agent\": \"electron-complete-builder\",\r\n            \"Content-Type\": mime.lookup(fileName),\r\n            \"Content-Length\": fileStat.size\r\n          }\r\n        }, this.token, (request, reject) => {\r\n          const fileInputStream = createReadStream(file)\r\n          fileInputStream.on(\"error\", reject)\r\n          fileInputStream\r\n            .pipe(progressStream({\r\n              length: fileStat.size,\r\n              time: 1000\r\n            }, progress => progressBar == null ? console.log(\".\") : progressBar.tick(progress.delta)))\r\n            .pipe(request)\r\n        })\r\n      }\r\n      catch (e) {\r\n        if (e instanceof HttpError) {\r\n          if (e.response.statusCode === 422 && e.description != null && e.description.errors != null && e.description.errors[0].code === \"already_exists\") {\r\n            // delete old artifact and re-upload\r\n            log(\"Artifact %s already exists, overwrite one\", fileName)\r\n            const assets = await gitHubRequest<Array<Asset>>(`/repos/${this.owner}/${this.repo}/releases/${release.id}/assets`, this.token)\r\n            for (let asset of assets) {\r\n              if (asset!.name === fileName) {\r\n                await gitHubRequest<void>(`/repos/${this.owner}/${this.repo}/releases/assets/${asset!.id}`, this.token, null, \"DELETE\")\r\n                continue uploadAttempt\r\n              }\r\n            }\r\n\r\n            log(\"Artifact %s not found, trying to upload again\", fileName)\r\n            continue\r\n          }\r\n          else if (e.response.statusCode === 502 && badGatewayCount++ < 3) {\r\n            continue\r\n          }\r\n        }\r\n\r\n        throw e\r\n      }\r\n    }\r\n  }\r\n\r\n  private createRelease() {\r\n    return gitHubRequest<Release>(`/repos/${this.owner}/${this.repo}/releases`, this.token, {\r\n      tag_name: this.tag,\r\n      name: this.tag,\r\n      draft: this.options.draft == null || this.options.draft,\r\n      prerelease: this.options.prerelease != null && this.options.prerelease,\r\n    })\r\n  }\r\n\r\n  // test only\r\n  async getRelease(): Promise<any> {\r\n    return gitHubRequest<Release>(`/repos/${this.owner}/${this.repo}/releases/${this._releasePromise.value().id}`, this.token)\r\n  }\r\n\r\n  //noinspection JSUnusedGlobalSymbols\r\n  async deleteRelease(): Promise<any> {\r\n    if (!this._releasePromise.isFulfilled()) {\r\n      return BluebirdPromise.resolve()\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      try {\r\n        return await gitHubRequest(`/repos/${this.owner}/${this.repo}/releases/${this._releasePromise.value().id}`, this.token, null, \"DELETE\")\r\n      }\r\n      catch (e) {\r\n        if (e instanceof HttpError && (e.response.statusCode === 405 || e.response.statusCode === 502)) {\r\n          continue\r\n        }\r\n\r\n        throw e\r\n      }\r\n    }\r\n\r\n    warn(`Cannot delete release ${this._releasePromise.value().id}`)\r\n  }\r\n}"
  ]
}
