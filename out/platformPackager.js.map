{
  "version": 3,
  "file": "platformPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/platformPackager.ts"
  ],
  "names": [],
  "mappings": ";;AACA,2BAAuG,AAAY,AACnH,AAAC;AACD,2BAA2C,AAAU,AACrD,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,uCAAgE,AAAsB,AACtF,AAAC;AAAD,6BAAwD,AAAY,AACpE,AAAC;AAAD,uBAAiD,AAAQ,AACzD,AAAC;AAED,0BAA2B,AAAmB,AAC9C,AAAC;AAAD,4BAA0B,AAAW,AACrC,AAAC;AAAD,2BAAsD,AAAY,AAClE,AAAC;AAAD,MAAO,AAAU,qBAAW,AAAa,AAAC,AAE1C,AAAmC;;AACnC,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AAEzB,QAAa,gBAAG,CAAC,AAAK,OAAE,AAAK,OAAE,AAAI,MAAE,AAAQ,UAAE,AAAQ,UAAE,AAAQ,UAAE,AAAS,AAAC;AAE7E,QAAU,aAAG,AAAK;AA8C/B;AAiBE,gBAAmB,AAAe;AAAf,aAAI,OAAJ,AAAI,AAAW;AAChC,AAAI,aAAC,AAAO,UAAG,AAAI,KAAC,AAAO;AAC3B,AAAI,aAAC,AAAU,aAAG,AAAI,KAAC,AAAU;AACjC,AAAI,aAAC,AAAQ,WAAG,AAAI,KAAC,AAAQ;AAC7B,AAAI,aAAC,AAAW,cAAG,AAAI,KAAC,AAAW;AAEnC,AAAI,aAAC,AAAiB,oBAAG,AAAI,KAAC,AAAO,QAAC,AAAI,KAAC,AAAU,YAAE,AAAI,KAAC,AAA6B,AAAC;AAC1F,AAAI,aAAC,AAAkB,qBAAS,AAAI,KAAC,AAAW,YAAC,AAAM,MAAC,AAAI,KAAC,AAAQ,SAAC,AAAqB,AAAC,0BAAI,AAAM,OAAC,AAAM,OAAC,AAAI,AAAC;AACnH,AAAI,aAAC,AAAO,UAAG,WAAc,eAAC,AAAI,KAAC,AAAQ,UAAE,AAAI,KAAC,AAAW,AAAC;AAE9D,AAAI,aAAC,AAAY,4BAAU,QAAC,AAAI,KAAC,AAAiB,AAAC,mBAChD,AAAK,MAAC,AAAC;AACN,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,sBAAM,AAAC,AACT;AAAC;AACD,AAAM,mBAAC,AAAE,AACX;AAAC,AAAC,AACN,SAPsB;AAOrB;AAnBD,QAAoB,AAAQ,YAAY;AAqB9B,AAAc;AACtB,cAAM,AAAQ,WAAG,AAAI,KAAC,AAAO,QAAC,AAAc;AAC5C,AAAE,AAAC,YAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,mBAAG,IAAC,AAA8D,AAAC;AACnE,AAAM,mBAAC,AAAE,AACX;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAM,mBAAC,AAAQ,SAAC,AAAI,AAAE,AACxB;AAAC,AACH;AAAC;AAES,AAAgB;AACxB,AAAG,AAAC,aAAC,IAAI,AAAO,WAAI,AAAI,KAAC,AAAO,QAAC,AAAQ,QAAC,AAAG,IAAC,AAAI,KAAC,AAAQ,AAAE,UAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AACvE,AAAG,AAAC,iBAAC,IAAI,AAAC,KAAI,AAAO,AAAC,SAAC,AAAC;AACtB,AAAE,AAAC,oBAAC,AAAC,MAAK,AAAK,AAAC,OAAC,AAAC;AAChB,AAAM,2BAAC,AAAK,AACd;AAAC,AACH;AAAC,AACH;AAAC;AAED,cAAM,AAAO,UAAG,AAAgB,iBAAC,AAAI,KAAC,AAAkB,mBAAC,AAAM,AAAC;AAChE,AAAM,eAAC,AAAO,WAAI,AAAI,QAAI,AAAO,QAAC,AAAM,WAAK,AAAC,KAAI,AAAO,QAAC,AAAC,AAAC,OAAK,AAAK,AACxE;AAAC;AAED,QAAI,AAA6B;AAC/B,AAAM,eAAC,OAAG,IAAC,AAAI,KAAC,AAAW,YAAC,AAAW,aAAE,AAAE,MAAI,AAAG,GAAC,AAAc,AAAC,mBAAI,AAAO,AAC/E;AAAC;AAED,QAAa,AAAgB,oBAAiB;AAEpC,AAAgB,qBAAC,AAAc,QAAE,AAAU;AACnD,AAAM,eAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,IAAG,AAAI,KAAC,AAAQ,SAAC,AAAqB,0BAAG,AAAI,SAAK,WAAI,KAAC,AAAG,MAAG,AAAE,KAAG,KAAI,WAAI,KAAC,AAAI,AAAC,OAAE,GAAE,AAAC,AAChH;AAAC;AAED,AAAuB,4BAAC,AAAY,MAAE,AAAqB;AACzD,AAAI,aAAC,AAAI,KAAC,AAAY,aAAC,AAAI,KAAC,AAAiB;AAC3C,AAAI,kBAAE,AAAI;AACV,AAAY,0BAAE,AAAY;AAC1B,AAAQ,sBAAE,AAAI,KAAC,AAAQ,AACxB,AAAC,AACJ;AALiD;AAKhD;AAIe,AAAM,WAAC,AAAgC,SAAE,AAAc,QAAE,AAAiB,WAAE,AAAU,MAAE,AAAsB;;AAC5H,kBAAM,AAAW,cAAG,AAAI,KAAC,AAAkB,mBAAC,AAAkB,AAAC;AAC/D,AAAO,oBAAC,AAAa,gBAAG,CAAO,AAAI,MAAE,AAAQ,UAAE,AAAe;AAC5D,sBAAM,AAAO,UAAG,AAAI,KAAC,AAAI,KAAC,AAAQ,UAAE,AAAe,AAAC;AACpD,sBAAM,AAAa,gBAAG,AAAI,KAAC,AAAO,QAAC,AAAO,AAAC;AAE3C,oBAAI,AAAO,UAAwB,AAAI;AACvC,sBAAM,AAAgB,mBAAS,AAAI,KAAC,AAAW,YAAC,AAAM,MAAC,AAAM;AAC7D,AAAE,AAAC,oBAAC,AAAgB,AAAC,kBAAC,AAAC;AACrB,AAAE,AAAC,wBAAC,OAAO,AAAgB,qBAAK,AAAU,AAAC,YAAC,AAAC;AAC3C,+BAAG,IAAC,CAAwL,AAAC,AAC/L;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,+BAAI,KAAC,CAAuI,AAAC,AAC/I;AAAC;AAED,AAAO,8BAAG,aAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAO,SAAE,EAAC,AAAM,QAAE,uBAAgB,iBAAC,AAAI,AAAC,OAAE,AAAW,aAAE,AAAI,AAAC,AAAC,AAChG;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,0BAAM,AAAW,cAAG,IAAI,AAAG,IAAC,CAAC,AAAI,KAAC,AAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAI,KAAC,AAAI,AAAC,MAAE,AAAI,KAAC,AAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAI,KAAC,AAAiB,AAAC,AAAC,AAAC;AAClI,AAAE,AAAC,wBAAC,CAAC,AAAI,KAAC,AAAI,KAAC,AAAiC,AAAC,mCAAC,AAAC;AACjD,8BAAM,AAAM,SAAG,MAAM,WAAe,QAAC,AAAG,IAAC,CAAC,AAAgB,iBAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAK,AAAC,QAAE,AAAgB,iBAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAI,AAAC,AAAC,AAAC;AAC/H,8BAAM,AAAiB,oBAAG,IAAI,AAAG,IAAC,AAAM,OAAC,AAAC,AAAC,AAAC,AAE5C,AAA+E;;AAC/E,8BAAM,AAAc,iBAAG,MAAM,aAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAM,AAAC;AAEvD,AAAG,AAAC,6BAAC,IAAI,AAAE,MAAI,AAAM,OAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AACzB,AAAE,AAAC,gCAAC,CAAC,AAAiB,kBAAC,AAAG,IAAC,AAAE,AAAC,AAAC,KAAC,AAAC;AAC/B,AAAE,AAAC,oCAAC,AAAE,GAAC,AAAU,WAAC,AAAc,AAAC,AAAC,iBAAC,AAAC;AAClC,AAAE,yCAAG,AAAE,GAAC,AAAS,UAAC,AAAc,eAAC,AAAM,SAAG,AAAC,AAAC,AAC9C;AAAC,AACD,AAAI,uCAAC,AAAE,AAAC,IAAC,AAAE,GAAC,AAAU,WAAC,AAAI,KAAC,AAAI,KAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AACzC,AAAE,yCAAG,AAAE,GAAC,AAAS,UAAC,AAAI,KAAC,AAAI,KAAC,AAAM,OAAC,AAAM,SAAG,AAAC,AAAC,AAChD;AAAC;AACD,AAAW,4CAAC,AAAG,IAAC,AAAE,AAAC,AACrB;AAAC,AACH;AAAC,AACH;AAAC;AAED,wBAAI,AAAQ,WAAG,AAAI,KAAC,AAAe,gBAAC,AAAO,SAAE,AAAkB,AAAC;AAChE,AAAE,AAAC,wBAAC,AAAQ,YAAI,AAAI,QAAI,AAAQ,SAAC,AAAM,WAAK,AAAC,AAAC,GAAC,AAAC;AAC9C,AAAQ,mCAAG,CAAC,AAAM,AAAC,AACrB;AAAC;AACD,AAAO,8BAAG,AAAY,aAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAO,SAAE,AAAI,KAAC,AAAiB,kBAAC,AAAQ,UAAE,AAAI,AAAC,OAAE,AAAI,MAAE,AAAW,AAAC,AAC9G;AAAC;AAED,sBAAM,AAAQ,WAAG,CAAC,AAAO,AAAC;AAC1B,AAAE,AAAC,oBAAC,AAAI,KAAC,AAAI,KAAC,AAAe,gBAAC,AAAC,AAAC,OAAK,AAAG,AAAC,KAAC,AAAC,AACzC,AAAkF;;AAClF,AAAQ,6BAAC,AAAI,KAAC,aAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAa,eAAE,AAAkB,AAAC,AAAC,sBAAE,aAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAa,eAAE,AAAa,AAAC,AAAC,AAAC,AACtH;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAQ,6BAAC,AAAI,KAAC,aAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAa,eAAE,AAAkB,AAAC,AAAC,AAAC,AACrE;AAAC;AAED,sBAAM,WAAe,QAAC,AAAG,IAAC,AAAQ,AAAC;AAEnC,AAAE,AAAC,oBAAC,AAAI,KAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AACvB,2BAAI,KAAC,AAA6E,AAAC,AACrF;AAAC;AAED,AAAE,AAAC,oBAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,0BAAM,WAAiB,kBAAC,AAAO,SAAE,AAAa,eAAE,AAAW,AAAC,AAC9D;AAAC,AACH;AAAC;AACD,kBAAM,uBAAI,KAAC,AAAO,AAAC;AAEnB,kBAAM,AAAI,KAAC,AAAgB,iBAAC,AAAI,MAAE,AAAS,WAAE,AAAI,MAAE,AAAkB,AAAC;AACtE,kBAAM,AAAI,KAAC,AAAgB,iBAAC,AAAK,OAAE,AAAS,WAAE,AAAI,MAAE,AAAkB,AAAC;AAEvE,kBAAM,AAAS,YAAG,AAAI,KAAC,AAAW,YAAC,AAAK,MAAC,AAAS;AAClD,AAAE,AAAC,gBAAC,AAAS,aAAI,AAAI,AAAC,MAAC,AAAC;AACtB;AACE,AAAS,+BAAE,AAAS;AACpB,AAAO,6BAAE,AAAO,AACjB,AAAC,AACJ;AAJkB,iBAAV,AAAS;AAIhB;AAED,kBAAM,AAAI,KAAC,AAAkB,mBAAC,AAAS,WAAE,AAAW,eAAI,AAAI,AAAC,AAC/D;AAAC;AAAA;AAES,AAAkB,uBAAC,AAAc,QAAE,AAAiB,WAAE,AAAU;AACxE,cAAM,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAO;AACrC,YAAI,AAAY,eAAG,AAAO;AAC1B,cAAM,AAAW,cAAG,AAAI,KAAC,AAAkB,AAAE;AAC7C,AAAE,AAAC,YAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAY,4BAAI,AAAG,MAAG,AAAW,AACnC;AAAC,AAED,AAAoC;;AACpC,cAAM,AAAO;AACX,AAAG,iBAAE,AAAI,KAAC,AAAI,KAAC,AAAM;AACrB,AAAG,iBAAE,AAAM;AACX,AAAI,kBAAE,AAAI,KAAC,AAAO;AAClB,AAAW,yBAAE,AAAI,KAAC,AAAO;AACzB,AAAQ,sBAAE,AAAI,KAAC,AAAQ,SAAC,AAAQ;AAChC,AAAI,kBAAE,WAAI,KAAC,AAAI,AAAC;AAChB,AAAO,qBAAE,AAAI,KAAC,AAAI,KAAC,AAAe;AAClC,AAAI,kBAAE,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAiB,mBAAE,AAAM,AAAC;AAC/C,AAAS,uBAAE,AAAI;AACf,AAAa,2BAAE,AAAO;AACtB,AAAe,6BAAE,gBAAe,IAAI,AAAI,AAAE,OAAC,AAAW,AAAE,mBAAI,AAAI,KAAC,AAAQ,SAAC,AAAM,OAAC,AAAI,QAAI,AAAI,KAAC,AAAO,SAAE;AACvG,AAAe,6BAAE,AAAY;AAC7B,AAAM,oBAAE,AAAK;AACb,AAAqB,mCAAE,MAAM,AAAI,KAAC,AAAQ,SAAC,AAAS,AAAC;AACrD,AAAgB;AACd,AAAW,6BAAE,AAAI,KAAC,AAAQ,SAAC,AAAM,OAAC,AAAI;AACtC,AAAe,iCAAE,AAAO,QAAC,AAAI,KAAC,AAAQ,SAAC,AAAW,AAAC;AACnD,AAAW,6BAAE,AAAI,KAAC,AAAO;AACzB,AAAY,8BAAE,AAAI,KAAC,AAAO,AAC3B,AACF;AANmB;AAfY,SAAX,AAAU,EAqB5B,AAAI,KAAC,AAAW,YAAC,AAAK,AAAC;AAE1B,eAAO,AAAO,QAAC,AAAG;AAClB,eAAO,AAAO,QAAC,AAAG;AAClB,eAAO,AAAO,QAAC,AAAK,AACpB,AAAyC;;AACzC,eAAO,AAAO,QAAC,AAAO;AACtB,AAAM,eAAC,AAAO,AAChB;AAAC;AAEO,AAAkB,uBAAC,AAAsB;AAC/C,YAAI,AAAM,SAAG,AAAI,KAAC,AAAW,YAAC,AAAK,MAAC,AAAI;AACxC,YAAI,AAAgB,mBAAG,AAAkB,mBAAC,AAAI;AAC9C,AAAE,AAAC,YAAC,AAAgB,oBAAI,AAAI,AAAC,MAAC,AAAC;AAC7B,AAAM,qBAAG,AAAgB,AAC3B;AAAC;AAED,AAAE,AAAC,YAAC,AAAM,WAAK,AAAK,AAAC,OAAC,AAAC;AACrB,AAAM,mBAAC,AAAI,AACb;AAAC;AAED,cAAM,AAAa,gBAA4B,AAAI,KAAC,AAAW,YAAC,AAAK;AACrE,AAAE,AAAC,YAAC,AAAa,cAAC,AAAa,AAAC,kBAAI,AAAI,AAAC,MAAC,AAAC;AACzC,mBAAI,KAAC,AAAsD,AAAC,AAC9D;AAAC;AACD,AAAE,AAAC,YAAC,AAAa,cAAC,AAAiB,AAAC,sBAAI,AAAI,AAAC,MAAC,AAAC;AAC7C,mBAAI,KAAC,AAA6D,AAAC,AACrE;AAAC;AAED,AAAE,AAAC,YAAC,AAAM,UAAI,AAAI,QAAI,AAAM,WAAK,AAAI,AAAC,MAAC,AAAC;AACtC,AAAM;AACJ,AAAM,wBAAE,AAAa,cAAC,AAAa,AAAC;AACpC,AAAS,2BAAE,AAAa,cAAC,AAAiB,AAAC,AAC5C,AACH;AAJS;AAIR,AACD,AAAI,eAAC,AAAC;AACJ,AAAM,mBAAC,AAAM,AACf;AAAC,AACH;AAAC;AAEO,AAAa,kBAAC,AAAe,SAAE,AAAU;AAC/C,AAAM,eAAC,AAAO,QACX,AAAO,QAAC,AAAY,cAAE,WAAI,KAAC,AAAI,AAAC,AAAC,OACjC,AAAO,QAAC,AAAU,YAAE,AAAI,KAAC,AAAQ,SAAC,AAAqB,AAAC,uBACxD,AAAO,QAAC,AAAY,cAAE,AAAiB,AAAC,AAC7C;AAAC;AAEa,AAAgB,qBAAC,AAAoB,aAAE,AAAiB,WAAE,AAAU,MAAE,AAAsB;;AACxG,kBAAM,AAAI,OAAG,AAAW,cAAG,AAAI,KAAC,AAAe,gBAAC,AAAS,AAAC,aAAG,AAAI,KAAC,AAAQ,aAAK,WAAQ,SAAC,AAAG,MAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,IAAG,AAAI,KAAC,AAAO,SAAM,OAAE,AAAU,AAAC,cAAG,AAAS;AACjK,kBAAM,AAAQ,WAAG,AAAI,KAAC,AAAe,gBAAC,AAAW,cAAG,AAAgB,mBAAG,AAAY,cAAE,AAAkB,AAAC;AACxG,AAAM,mBAAC,AAAQ,YAAI,AAAI,QAAI,AAAQ,SAAC,AAAM,WAAK,AAAC,IAAG,AAAI,OAAG,AAAY,aAAC,AAAI,KAAC,AAAU,YAAE,AAAI,MAAE,AAAI,KAAC,AAAiB,kBAAC,AAAQ,UAAE,AAAI,AAAC,AAAC,AACvI;AAAC;AAAA;AAEO,AAAiB,sBAAC,AAAuB,UAAE,AAAU;AAC3D,cAAM,AAAgB,mBAAG,AAAE;AAC3B,cAAM,AAAc,iBAAqB,AAAE;AAC3C,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAQ,SAAC,AAAM,QAAE,AAAC,AAAE,KAAE,AAAC;AACzC,AAAc,2BAAC,AAAC,AAAC,KAAG,IAAI,YAAS,UAAC,AAAI,KAAC,AAAa,cAAC,AAAQ,SAAC,AAAC,AAAC,IAAE,AAAI,AAAC,OAAE,AAAgB,AAAC,AAC5F;AAAC;AACD,AAAM,eAAC,AAAc,AACvB;AAAC;AAEO,AAAe,oBAAC,AAA+C,MAAE,AAAsB;AAC7F,YAAI,AAAQ,WAAqC,AAAI,KAAC,AAAW,YAAC,AAAM,MAAC,AAAI,AAAC;AAC9E,AAAE,AAAC,YAAC,AAAQ,YAAI,AAAI,QAAI,CAAC,AAAK,MAAC,AAAO,QAAC,AAAQ,AAAC,AAAC,WAAC,AAAC;AACjD,AAAQ,uBAAG,CAAC,AAAQ,AAAC,AACvB;AAAC;AAED,YAAI,AAAwB,2BAAqC,AAAmB,mBAAC,AAAI,AAAC;AAC1F,AAAE,AAAC,YAAC,AAAwB,4BAAI,AAAI,AAAC,MAAC,AAAC;AACrC,AAAE,AAAC,gBAAC,CAAC,AAAK,MAAC,AAAO,QAAC,AAAwB,AAAC,AAAC,2BAAC,AAAC;AAC7C,AAAwB,2CAAG,CAAC,AAAwB,AAAC,AACvD;AAAC;AACD,AAAM,mBAAC,AAAQ,YAAI,AAAI,OAAG,AAAwB,2BAAG,AAAK,MAAC,AAAI,KAAC,IAAI,AAAG,IAAC,AAAQ,SAAC,AAAM,OAAC,AAAwB,AAAC,AAAC,AAAC,AACrH;AAAC;AACD,AAAM,eAAC,AAAQ,AACjB;AAAC;AAEK,AAAiB;;AACrB,kBAAM,AAAG,MAAG,AAAI,KAAC,AAAQ,SAAC,AAAQ,YAAI,AAAI,KAAC,AAAW,YAAC,AAAQ;AAC/D,AAAE,AAAC,gBAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AAChB,AAAM,uBAAC,AAAG,AACZ;AAAC;AAED,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAI,KAAC,AAAc,kBAAI,AAAI,AAAC,MAAC,AAAC;AACrC,sBAAM,AAAI,OAAG,MAAM,AAAI,KAAC,AAAI,KAAC,AAAc,eAAC,AAAO,QAAC,AAAI,AAAC;AACzD,AAAE,AAAC,oBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAM,2BAAC,uBAAsB,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAO,SAAE,AAC1D;AAAC,AACH;AAAC;AACD,AAAM,mBAAC,AAAI,AACb;AAAC;AAAA;AAES,AAAkB;AAC1B,AAAM,eAAC,AAAI,KAAC,AAAW,YAAC,AAAK,MAAC,AAAe,AAAC,oBAAI,AAAO,QAAC,AAAG,IAAC,AAAmB,uBAAI,AAAO,QAAC,AAAG,IAAC,AAAqB,yBAAI,AAAO,QAAC,AAAG,IAAC,AAAgB,oBAAI,AAAO,QAAC,AAAG,IAAC,AAAY,AACpL;AAAC;AAEO,AAAe,oBAAC,AAAiB;AACvC,AAAM,eAAC,AAAI,KAAC,AAAQ,aAAK,WAAQ,SAAC,AAAG,MAAG,AAAI,KAAC,AAAkB,mBAAC,AAAS,AAAC,aAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAW,AAAC,AAChH;AAAC;AAEO,AAAkB,uBAAC,AAAiB;AAC1C,AAAM,eAAC,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,IAAG,AAAI,KAAC,AAAO,SAAM,OAAE,AAAU,YAAE,AAAW,AAAC,AAC7E;AAAC;AAEa,AAAkB,uBAAC,AAAoB,cAAE,AAAY,MAAE,AAAe;;AAClF,kBAAM,AAAY,eAAG,AAAI,KAAC,AAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAI,KAAC,AAAO,QAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAI,AAAC,AAAC;AAC1F,AAAE,AAAC,gBAAC,AAAM,AAAC,QAAC,AAAC;AACX,sBAAM,WAAkB,mBAAC,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAU,AAAC,aAAE,AAAY,AAAC,AAC7E;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAO,UAAG,MAAM,OAAU,WAAC,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAK,OAAE,AAAY,AAAC,AAAC;AAC9E,AAAE,AAAC,oBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,0BAAM,IAAI,AAAK,MAAC,4BAA2B,AAAY,cAAqD,AAAC,AAC/G;AAAC,AACD,AAAI,uBAAC,AAAE,AAAC,IAAC,CAAC,AAAO,QAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AAC3B,0BAAM,IAAI,AAAK,MAAC,4BAA2B,AAAY,cAAoD,AAAC,AAC9G;AAAC,AACH;AAAC,AACH;AAAC;AAAA;AAEa,AAAkB,uBAAC,AAAiB,WAAE,AAAe;;AACjE,kBAAM,AAAO,UAAG,MAAM,OAAU,WAAC,AAAS,AAAC;AAE3C,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,sBAAM,IAAI,AAAK,MAAC,sBAAqB,AAAS,WAAqD,AAAC,AACtG;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,CAAC,AAAO,QAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AAChC,sBAAM,IAAI,AAAK,MAAC,sBAAqB,AAAS,WAAyD,AAAC,AAC1G;AAAC;AAED,kBAAM,AAAQ,WAAG,AAAI,KAAC,AAAQ,SAAC,AAAI,QAAI,AAAU;AACjD,kBAAM,AAAI,KAAC,AAAkB,mBAAC,AAAI,KAAC,AAAe,gBAAC,AAAS,AAAC,YAAE,AAAQ,UAAE,AAAM,AAAC,AAClF;AAAC;AAAA;AAEe,AAAU,eAAC,AAAc,QAAE,AAAiB,WAAE,AAAe;;AAC3E,AAAM,mBAAC,UAAU,WAAC,AAAI,KAAC,AAAW,YAAC,AAAK,MAAC,AAAW,aAAE,AAAM,QAAE,AAAO,SAAE,AAAI,KAAC,AAAQ,aAAK,WAAQ,SAAC,AAAG,MAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,IAAG,AAAI,KAAC,AAAO,SAAM,AAAC,SAAG,AAAS,AAAC,AAClK;AAAC;AAAA,AACH,AAAC;;AA1UqB,QAAgB,mBA0UrC;AAED,uBAA8B,AAAU;AACtC,AAAM,WAAC,AAAI,SAAK,WAAI,KAAC,AAAG,MAAG,AAAE,KAAG,KAAI,WAAI,KAAC,AAAI,AAAC,OAAE,AAClD;AAAC;AAFe,QAAa,gBAE5B;AASD,0BAAiC,AAAkD;AACjF,AAAE,AAAC,QAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAM,eAAC,AAAI,AACb;AAAC,AACD,AAAI,WAAC,AAAC;AACJ,AAAM,eAAC,CAAC,AAAK,MAAC,AAAO,QAAC,AAAO,AAAC,WAAG,AAAO,UAAG,CAAC,AAAO,AAAC,AAAC,UAAC,AAAG,IAAC,AAAE,MAAI,AAAE,GAAC,AAAW,AAAE,cAAC,AAAI,AAAE,AAAC,AAC1F;AAAC,AACH;AAAC;AAPe,QAAgB,mBAO/B,AAED,AAAoG,AACpG,AAAmE;;;AACnE,iBAAwB,AAAS,GAC/B,AAAkB;;AAClB,AAAC,QAAG,AAAC,EAAC,AAAO,QAAC,AAAuB,yBAAE,AAAU,AAAC,AAClD,AAAgC;;AAChC,AAAC,QAAG,AAAC,EAAC,AAAO,QAAC,AAAI,MAAE,AAAQ,AAAC,AAC7B,AAAkB;;AAClB,AAAC,QAAG,AAAC,EAAC,AAAO,QAAC,AAA6B,+BAAE,AAAU,AAAC,AACxD,AAAkB;;AAClB,AAAC,QAAG,AAAC,EAAC,AAAO,QAAC,AAAI,MAAE,AAAQ,AAAC;AAC7B,AAAM,WAAC,AAAC,AACV;AAAC;AAVe,QAAO,UAUtB,AAED,AAAgE;;AAChE,sBAAsB,AAAY,MAAE,AAA0B;AAC5D,QAAI,AAAK,QAAG,AAAK;AACjB,AAAG,AAAC,SAAC,IAAI,AAAO,WAAI,AAAQ,AAAC,UAAC,AAAC,AAC7B,AAAqD,AACrD,AAAyD;;;AACzD,AAAE,AAAC,YAAC,AAAK,UAAK,AAAO,QAAC,AAAM,AAAC,QAAC,AAAC;AAC7B,AAAQ,AACV;AAAC,AAED,AAAqE,AACrE,AAA6M;;;AAC7M,AAAK,gBAAG,AAAO,QAAC,AAAK,MAAC,AAAI,MAAE,CAAC,AAAO,QAAC,AAAM,AAAC;AAC5C,AAAE,AAAC,YAAC,CAAC,AAAK,SAAI,CAAC,AAAO,QAAC,AAAM,AAAC,QAAC,AAAC;AAC9B,kBAAM,AAAU,aAAG,AAAO,QAAC,AAAO,AAClC,AAAY;;AACZ,kBAAM,AAAsB,yBAAG,AAAU,WAAC,AAAM,SAAG,AAAC;AACpD,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,SAAG,AAAsB,AAAC,wBAAC,AAAC,AACzC,AAAqC;;AACrC,AAAK,wBAAG,AAAI,KAAC,AAAU,WAAC,AAAM,AAAC,YAAK,AAAG,OAAI,AAAI,KAAC,AAAU,WAAC,AAAU,AAAC,AACxE;AAAC,AACH;AAAC,AACH;AAAC;AACD,AAAM,WAAC,AAAK,AACd;AAAC,AAED,AAAiF;;AACjF,sBAAsB,AAAW,KAAE,AAAmB,aAAE,AAA0B;QAAE,AAAW,oEAAY,AAAK;QAAE,AAAyB;;AACzI,AAAM,wBAAK,KAAC,AAAG,KAAE,AAAW;AAC1B,AAAW,qBAAE,AAAW;AACxB,AAAM,gBAAE,AAAE;AACR,AAAE,AAAC,gBAAC,AAAG,QAAK,AAAE,AAAC,IAAC,AAAC;AACf,AAAM,uBAAC,AAAI,AACb;AAAC;AACD,gBAAI,AAAQ,WAAG,AAAE,GAAC,AAAS,UAAC,AAAG,IAAC,AAAM,SAAG,AAAC,AAAC,AAE3C,AAA2C;;AAC3C,AAAE,AAAC,gBAAC,AAAW,eAAI,AAAI,QAAI,AAAW,YAAC,AAAG,IAAC,AAAQ,AAAC,AAAC,WAAC,AAAC;AACrD,AAAM,uBAAC,AAAK,AACd;AAAC;AAED,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAG,QAAK,AAAI,AAAC,MAAC,AAAC;AACtB,AAAQ,2BAAG,AAAQ,SAAC,AAAO,QAAC,AAAK,OAAE,AAAG,AAAC,AACzC;AAAC;AACD,AAAM,mBAAC,AAAY,aAAC,AAAQ,UAAE,AAAQ,AAAC,AACzC;AAAC,AACF,AAAC,AACJ;AAnBgC,KAAvB;AAmBR;AAED,iCAAwC,AAAsB,SAAE,AAAsC;AACpG,QAAI,AAAO,UAAG,AAAgB,iBAAC,AAAO,QAAC,AAAM,WAAK,AAAC,IAAG,AAAmB,sBAAG,AAAO,AAAC;AACpF,AAAM,WAAC,AAAO,WAAI,AAAI,OAAG,CAAC,AAAS,AAAC,aAAG,AAAO,AAChD;AAAC;AAHe,QAAuB,0BAGtC;AAED,0BAAgC,AAAc,QAAE,AAAmB;;AACjE,YAAI,AAAW,cAAG,AAAO,QAAC,AAAG,IAAC,AAAY,gBAAI,AAAO,QAAC,AAAG,IAAC,AAAU;AACpE,cAAM,AAAW,cAAG,CAAC,AAAI,MAAE,AAAU,aAAG,AAAc,iBAAG,AAAO,SAAE,AAAa,AAAC;AAChF,AAAE,AAAC,YAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAW,0BAAG,AAAO,QAAC,AAAQ,aAAK,AAAO,UAAG,AAAS,YAAG,AAAK,AAChE;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAW,wBAAC,AAAO,QAAC,AAAW,AAAC;AAChC,AAAW,0BAAG,AAAO,QAAC,AAAG,IAAC,AAAiB,qBAAI,AAAO,QAAC,AAAG,IAAC,AAAQ,YAAI,AAAM,AAC/E;AAAC;AAED,cAAM,AAAM,UAAI,aAAU,KAAC,AAAW,aAAE,AAAW;AACjD,AAAG,iBAAE,AAAM;AACX,AAAK,mBAAE,AAAS;AAChB,AAAS,uBAAE,AAAI,OAAG,AAAI,AACvB,AAAC,AAAC;AAJkD,SAA/B,CAAP,EAIX,AAAI,AAAE,OAAC,AAAK,MAAC,AAAI,AAAC;AACtB,AAAE,AAAC,YAAC,AAAM,OAAC,AAAM,SAAG,AAAC,KAAI,EAAC,AAAM,OAAC,AAAC,AAAC,GAAC,AAAQ,QAAC,AAAgB,AAAC,AAAC,2BAAC,AAAC,AAC/D,AAA8B;;AAC9B,kBAAM,AAAS,YAAG,AAAM,OAAC,AAAM,SAAG,AAAC;AACnC,AAAM,mBAAC,AAAC,AAAC,KAAG,AAAM,OAAC,AAAS,AAAC;AAC7B,AAAM,mBAAC,AAAM,SAAG,AAAM,OAAC,AAAM,SAAG,AAAC,AACnC;AAAC;AACD,AAAM,eAAC,AAAM,AACf;AAAC;AAAA",
  "sourcesContent": [
    "import { InfoRetriever, ProjectMetadataProvider } from \"./repositoryInfo\"\r\nimport { AppMetadata, DevMetadata, Platform, PlatformSpecificBuildOptions, getProductName, Arch } from \"./metadata\"\r\nimport EventEmitter = NodeJS.EventEmitter\r\nimport { Promise as BluebirdPromise } from \"bluebird\"\r\nimport * as path from \"path\"\r\nimport { pack, ElectronPackagerOptions, userIgnoreFilter } from \"electron-packager-tf\"\r\nimport { readdir, copy, unlink, remove, realpath } from \"fs-extra-p\"\r\nimport { statOrNull, use, warn, log, exec } from \"./util\"\r\nimport { Packager } from \"./packager\"\r\nimport { AsarOptions } from \"asar\"\r\nimport { archiveApp } from \"./targets/archive\"\r\nimport { Minimatch } from \"minimatch\"\r\nimport { checkFileInPackage, createAsarArchive } from \"./asarUtil\"\r\nimport deepAssign = require(\"deep-assign\")\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __awaiter = require(\"./awaiter\")\r\n\r\nexport const commonTargets = [\"dir\", \"zip\", \"7z\", \"tar.xz\", \"tar.lz\", \"tar.gz\", \"tar.bz2\"]\r\n\r\nexport const DIR_TARGET = \"dir\"\r\n\r\nexport interface PackagerOptions {\r\n  targets?: Map<Platform, Map<Arch, string[]>>\r\n\r\n  projectDir?: string | null\r\n\r\n  cscLink?: string | null\r\n  cscKeyPassword?: string | null\r\n\r\n  cscInstallerLink?: string | null\r\n  cscInstallerKeyPassword?: string | null\r\n\r\n  platformPackagerFactory?: ((packager: Packager, platform: Platform, cleanupTasks: Array<() => Promise<any>>) => PlatformPackager<any>) | null\r\n\r\n  /**\r\n   * The same as [development package.json](https://github.com/electron-userland/electron-builder/wiki/Options#development-packagejson).\r\n   *\r\n   * Development `package.json` will be still read, but options specified in this object will override.\r\n   */\r\n  readonly devMetadata?: DevMetadata\r\n\r\n  /**\r\n   * The same as [application package.json](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata).\r\n   *\r\n   * Application `package.json` will be still read, but options specified in this object will override.\r\n   */\r\n  readonly appMetadata?: DevMetadata\r\n}\r\n\r\nexport interface BuildInfo extends ProjectMetadataProvider {\r\n  options: PackagerOptions\r\n\r\n  devMetadata: DevMetadata\r\n\r\n  projectDir: string\r\n  appDir: string\r\n\r\n  electronVersion: string\r\n\r\n  repositoryInfo: InfoRetriever | n\r\n  eventEmitter: EventEmitter\r\n\r\n  isTwoPackageJsonProjectLayoutUsed: boolean\r\n}\r\n\r\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> implements ProjectMetadataProvider {\r\n  protected readonly options: PackagerOptions\r\n\r\n  protected readonly projectDir: string\r\n  readonly buildResourcesDir: string\r\n\r\n  readonly metadata: AppMetadata\r\n  readonly devMetadata: DevMetadata\r\n\r\n  readonly customBuildOptions: DC\r\n\r\n  readonly appName: string\r\n\r\n  readonly resourceList: Promise<Array<string>>\r\n\r\n  public abstract get platform(): Platform\r\n\r\n  constructor(public info: BuildInfo) {\r\n    this.options = info.options\r\n    this.projectDir = info.projectDir\r\n    this.metadata = info.metadata\r\n    this.devMetadata = info.devMetadata\r\n\r\n    this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\r\n    this.customBuildOptions = (<any>info.devMetadata.build)[this.platform.buildConfigurationKey] || Object.create(null)\r\n    this.appName = getProductName(this.metadata, this.devMetadata)\r\n\r\n    this.resourceList = readdir(this.buildResourcesDir)\r\n      .catch(e => {\r\n        if (e.code !== \"ENOENT\") {\r\n          throw e\r\n        }\r\n        return []\r\n      })\r\n  }\r\n\r\n  protected getCscPassword(): string {\r\n    const password = this.options.cscKeyPassword\r\n    if (password == null) {\r\n      log(\"CSC_KEY_PASSWORD is not defined, empty password will be used\")\r\n      return \"\"\r\n    }\r\n    else {\r\n      return password.trim()\r\n    }\r\n  }\r\n\r\n  protected hasOnlyDirTarget(): boolean {\r\n    for (let targets of this.options.targets!.get(this.platform)!.values()) {\r\n      for (let t of targets) {\r\n        if (t !== \"dir\") {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n\r\n    const targets = normalizeTargets(this.customBuildOptions.target)\r\n    return targets != null && targets.length === 1 && targets[0] === \"dir\"\r\n  }\r\n\r\n  get relativeBuildResourcesDirname() {\r\n    return use(this.devMetadata.directories, it => it!.buildResources) || \"build\"\r\n  }\r\n\r\n  abstract get supportedTargets(): Array<string>\r\n\r\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\r\n    return path.join(outDir, `${this.platform.buildConfigurationKey}${arch === Arch.x64 ? \"\" : `-${Arch[arch]}`}`)\r\n  }\r\n\r\n  dispatchArtifactCreated(file: string, artifactName?: string) {\r\n    this.info.eventEmitter.emit(\"artifactCreated\", {\r\n      file: file,\r\n      artifactName: artifactName,\r\n      platform: this.platform,\r\n    })\r\n  }\r\n\r\n  abstract pack(outDir: string, arch: Arch, targets: Array<string>, postAsyncTasks: Array<Promise<any>>): Promise<any>\r\n\r\n  protected async doPack(options: ElectronPackagerOptions, outDir: string, appOutDir: string, arch: Arch, customBuildOptions: DC) {\r\n    const asarOptions = this.computeAsarOptions(customBuildOptions)\r\n    options.initializeApp = async (opts, buildDir, appRelativePath) => {\r\n      const appPath = path.join(buildDir, appRelativePath)\r\n      const resourcesPath = path.dirname(appPath)\r\n\r\n      let promise: Promise<any> | null = null\r\n      const deprecatedIgnore = (<any>this.devMetadata.build).ignore\r\n      if (deprecatedIgnore) {\r\n        if (typeof deprecatedIgnore === \"function\") {\r\n          log(`\"ignore is specified as function, may be new \"files\" option will be suit your needs? Please see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`)\r\n        }\r\n        else {\r\n          warn(`\"ignore is deprecated, please use \"files\", see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`)\r\n        }\r\n\r\n        promise = copy(this.info.appDir, appPath, {filter: userIgnoreFilter(opts), dereference: true})\r\n      }\r\n      else {\r\n        const ignoreFiles = new Set([path.relative(this.info.appDir, opts.out!), path.relative(this.info.appDir, this.buildResourcesDir)])\r\n        if (!this.info.isTwoPackageJsonProjectLayoutUsed) {\r\n          const result = await BluebirdPromise.all([listDependencies(this.info.appDir, false), listDependencies(this.info.appDir, true)])\r\n          const productionDepsSet = new Set(result[1])\r\n\r\n          // npm returns real path, so, we should use relative path to avoid any mismatch\r\n          const realAppDirPath = await realpath(this.info.appDir)\r\n\r\n          for (let it of result[0]) {\r\n            if (!productionDepsSet.has(it)) {\r\n              if (it.startsWith(realAppDirPath)) {\r\n                it = it.substring(realAppDirPath.length + 1)\r\n              }\r\n              else if (it.startsWith(this.info.appDir)) {\r\n                it = it.substring(this.info.appDir.length + 1)\r\n              }\r\n              ignoreFiles.add(it)\r\n            }\r\n          }\r\n        }\r\n\r\n        let patterns = this.getFilePatterns(\"files\", customBuildOptions)\r\n        if (patterns == null || patterns.length === 0) {\r\n          patterns = [\"**/*\"]\r\n        }\r\n        promise = copyFiltered(this.info.appDir, appPath, this.getParsedPatterns(patterns, arch), true, ignoreFiles)\r\n      }\r\n\r\n      const promises = [promise]\r\n      if (this.info.electronVersion[0] === \"0\") {\r\n        // electron release >= 0.37.4 - the default_app/ folder is a default_app.asar file\r\n        promises.push(remove(path.join(resourcesPath, \"default_app.asar\")), remove(path.join(resourcesPath, \"default_app\")))\r\n      }\r\n      else {\r\n        promises.push(unlink(path.join(resourcesPath, \"default_app.asar\")))\r\n      }\r\n\r\n      await BluebirdPromise.all(promises)\r\n\r\n      if (opts.prune != null) {\r\n        warn(\"prune is deprecated — development dependencies are never copied in any case\")\r\n      }\r\n\r\n      if (asarOptions != null) {\r\n        await createAsarArchive(appPath, resourcesPath, asarOptions)\r\n      }\r\n    }\r\n    await pack(options)\r\n\r\n    await this.doCopyExtraFiles(true, appOutDir, arch, customBuildOptions)\r\n    await this.doCopyExtraFiles(false, appOutDir, arch, customBuildOptions)\r\n\r\n    const afterPack = this.devMetadata.build.afterPack\r\n    if (afterPack != null) {\r\n      await afterPack({\r\n        appOutDir: appOutDir,\r\n        options: options,\r\n      })\r\n    }\r\n\r\n    await this.sanityCheckPackage(appOutDir, asarOptions != null)\r\n  }\r\n\r\n  protected computePackOptions(outDir: string, appOutDir: string, arch: Arch): ElectronPackagerOptions {\r\n    const version = this.metadata.version\r\n    let buildVersion = version\r\n    const buildNumber = this.computeBuildNumber()\r\n    if (buildNumber != null) {\r\n      buildVersion += \".\" + buildNumber\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    const options: any = deepAssign({\r\n      dir: this.info.appDir,\r\n      out: outDir,\r\n      name: this.appName,\r\n      productName: this.appName,\r\n      platform: this.platform.nodeName,\r\n      arch: Arch[arch],\r\n      version: this.info.electronVersion,\r\n      icon: path.join(this.buildResourcesDir, \"icon\"),\r\n      overwrite: true,\r\n      \"app-version\": version,\r\n      \"app-copyright\": `Copyright © ${new Date().getFullYear()} ${this.metadata.author.name || this.appName}`,\r\n      \"build-version\": buildVersion,\r\n      tmpdir: false,\r\n      generateFinalBasename: () => path.basename(appOutDir),\r\n      \"version-string\": {\r\n        CompanyName: this.metadata.author.name,\r\n        FileDescription: smarten(this.metadata.description),\r\n        ProductName: this.appName,\r\n        InternalName: this.appName,\r\n      }\r\n    }, this.devMetadata.build)\r\n\r\n    delete options.osx\r\n    delete options.win\r\n    delete options.linux\r\n    // this option only for windows-installer\r\n    delete options.iconUrl\r\n    return options\r\n  }\r\n\r\n  private computeAsarOptions(customBuildOptions: DC): AsarOptions | null {\r\n    let result = this.devMetadata.build.asar\r\n    let platformSpecific = customBuildOptions.asar\r\n    if (platformSpecific != null) {\r\n      result = platformSpecific\r\n    }\r\n\r\n    if (result === false) {\r\n      return null\r\n    }\r\n\r\n    const buildMetadata = <ElectronPackagerOptions>this.devMetadata.build\r\n    if (buildMetadata[\"asar-unpack\"] != null) {\r\n      warn(\"asar-unpack is deprecated, please set as asar.unpack\")\r\n    }\r\n    if (buildMetadata[\"asar-unpack-dir\"] != null) {\r\n      warn(\"asar-unpack-dir is deprecated, please set as asar.unpackDir\")\r\n    }\r\n\r\n    if (result == null || result === true) {\r\n      return {\r\n        unpack: buildMetadata[\"asar-unpack\"],\r\n        unpackDir: buildMetadata[\"asar-unpack-dir\"]\r\n      }\r\n    }\r\n    else {\r\n      return result\r\n    }\r\n  }\r\n\r\n  private expandPattern(pattern: string, arch: Arch): string {\r\n    return pattern\r\n      .replace(/\\$\\{arch}/g, Arch[arch])\r\n      .replace(/\\$\\{os}/g, this.platform.buildConfigurationKey)\r\n      .replace(/\\$\\{\\/\\*}/g, \"{,/**/*,/**/.*}\")\r\n  }\r\n\r\n  private async doCopyExtraFiles(isResources: boolean, appOutDir: string, arch: Arch, customBuildOptions: DC): Promise<any> {\r\n    const base = isResources ? this.getResourcesDir(appOutDir) : this.platform === Platform.OSX ? path.join(appOutDir, `${this.appName}.app`, \"Contents\") : appOutDir\r\n    const patterns = this.getFilePatterns(isResources ? \"extraResources\" : \"extraFiles\", customBuildOptions)\r\n    return patterns == null || patterns.length === 0 ? null : copyFiltered(this.projectDir, base, this.getParsedPatterns(patterns, arch))\r\n  }\r\n\r\n  private getParsedPatterns(patterns: Array<string>, arch: Arch): Array<Minimatch> {\r\n    const minimatchOptions = {}\r\n    const parsedPatterns: Array<Minimatch> = []\r\n    for (let i = 0; i < patterns.length; i++) {\r\n      parsedPatterns[i] = new Minimatch(this.expandPattern(patterns[i], arch), minimatchOptions)\r\n    }\r\n    return parsedPatterns\r\n  }\r\n\r\n  private getFilePatterns(name: \"files\" | \"extraFiles\" | \"extraResources\", customBuildOptions: DC): Array<string> | n {\r\n    let patterns: Array<string> | string | n = (<any>this.devMetadata.build)[name]\r\n    if (patterns != null && !Array.isArray(patterns)) {\r\n      patterns = [patterns]\r\n    }\r\n\r\n    let platformSpecificPatterns: Array<string> | string | n = (<any>customBuildOptions)[name]\r\n    if (platformSpecificPatterns != null) {\r\n      if (!Array.isArray(platformSpecificPatterns)) {\r\n        platformSpecificPatterns = [platformSpecificPatterns]\r\n      }\r\n      return patterns == null ? platformSpecificPatterns : Array.from(new Set(patterns.concat(platformSpecificPatterns)))\r\n    }\r\n    return patterns\r\n  }\r\n\r\n  async computePackageUrl(): Promise<string | null> {\r\n    const url = this.metadata.homepage || this.devMetadata.homepage\r\n    if (url != null) {\r\n      return url\r\n    }\r\n\r\n    if (this.info.repositoryInfo != null) {\r\n      const info = await this.info.repositoryInfo.getInfo(this)\r\n      if (info != null) {\r\n        return `https://github.com/${info.user}/${info.project}`\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  protected computeBuildNumber(): string | null {\r\n    return this.devMetadata.build[\"build-version\"] || process.env.TRAVIS_BUILD_NUMBER || process.env.APPVEYOR_BUILD_NUMBER || process.env.CIRCLE_BUILD_NUM || process.env.BUILD_NUMBER\r\n  }\r\n\r\n  private getResourcesDir(appOutDir: string): string {\r\n    return this.platform === Platform.OSX ? this.getOSXResourcesDir(appOutDir) : path.join(appOutDir, \"resources\")\r\n  }\r\n\r\n  private getOSXResourcesDir(appOutDir: string): string {\r\n    return path.join(appOutDir, `${this.appName}.app`, \"Contents\", \"Resources\")\r\n  }\r\n\r\n  private async checkFileInPackage(resourcesDir: string, file: string, isAsar: boolean) {\r\n    const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file))\r\n    if (isAsar) {\r\n      await checkFileInPackage(path.join(resourcesDir, \"app.asar\"), relativeFile)\r\n    }\r\n    else {\r\n      const outStat = await statOrNull(path.join(resourcesDir, \"app\", relativeFile))\r\n      if (outStat == null) {\r\n        throw new Error(`Application entry file \"${relativeFile}\" does not exist. Seems like a wrong configuration.`)\r\n      }\r\n      else if (!outStat.isFile()) {\r\n        throw new Error(`Application entry file \"${relativeFile}\" is not a file. Seems like a wrong configuration.`)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async sanityCheckPackage(appOutDir: string, isAsar: boolean): Promise<any> {\r\n    const outStat = await statOrNull(appOutDir)\r\n\r\n    if (outStat == null) {\r\n      throw new Error(`Output directory \"${appOutDir}\" does not exist. Seems like a wrong configuration.`)\r\n    }\r\n    else if (!outStat.isDirectory()) {\r\n      throw new Error(`Output directory \"${appOutDir}\" is not a directory. Seems like a wrong configuration.`)\r\n    }\r\n\r\n    const mainFile = this.metadata.main || \"index.js\"\r\n    await this.checkFileInPackage(this.getResourcesDir(appOutDir), mainFile, isAsar)\r\n  }\r\n\r\n  protected async archiveApp(format: string, appOutDir: string, outFile: string): Promise<any> {\r\n    return archiveApp(this.devMetadata.build.compression, format, outFile, this.platform === Platform.OSX ? path.join(appOutDir, `${this.appName}.app`) : appOutDir)\r\n  }\r\n}\r\n\r\nexport function getArchSuffix(arch: Arch): string {\r\n  return arch === Arch.x64 ? \"\" : `-${Arch[arch]}`\r\n}\r\n\r\nexport interface ArtifactCreated {\r\n  readonly file: string\r\n  readonly artifactName?: string\r\n\r\n  readonly platform: Platform\r\n}\r\n\r\nexport function normalizeTargets(targets: Array<string> | string | null | undefined): Array<string> | null {\r\n  if (targets == null) {\r\n    return null\r\n  }\r\n  else {\r\n    return (Array.isArray(targets) ? targets : [targets]).map(it => it.toLowerCase().trim())\r\n  }\r\n}\r\n\r\n// fpm bug - rpm build --description is not escaped, well... decided to replace quite to smart quote\r\n// http://leancrew.com/all-this/2010/11/smart-quotes-in-javascript/\r\nexport function smarten(s: string): string {\r\n  // opening singles\r\n  s = s.replace(/(^|[-\\u2014\\s(\\[\"])'/g, \"$1\\u2018\")\r\n  // closing singles & apostrophes\r\n  s = s.replace(/'/g, \"\\u2019\")\r\n  // opening doubles\r\n  s = s.replace(/(^|[-\\u2014/\\[(\\u2018\\s])\"/g, \"$1\\u201c\")\r\n  // closing doubles\r\n  s = s.replace(/\"/g, \"\\u201d\")\r\n  return s\r\n}\r\n\r\n// https://github.com/joshwnj/minimatch-all/blob/master/index.js\r\nfunction minimatchAll(path: string, patterns: Array<Minimatch>): boolean {\r\n  let match = false\r\n  for (let pattern of patterns) {\r\n    // If we've got a match, only re-test for exclusions.\r\n    // if we don't have a match, only re-test for inclusions.\r\n    if (match !== pattern.negate) {\r\n      continue\r\n    }\r\n\r\n    // partial match — pattern: foo/bar.txt path: foo — we must allow foo\r\n    // use it only for non-negate patterns: const m = new Minimatch(\"!node_modules/@(electron-download|electron-prebuilt)/**/*\", {dot: true }); m.match(\"node_modules\", true) will return false, but must be true\r\n    match = pattern.match(path, !pattern.negate)\r\n    if (!match && !pattern.negate) {\r\n      const rawPattern = pattern.pattern\r\n      // 1 - slash\r\n      const patternLengthPlusSlash = rawPattern.length + 1\r\n      if (path.length > patternLengthPlusSlash) {\r\n        // foo: include all directory content\r\n        match = path[rawPattern.length] === \"/\" && path.startsWith(rawPattern)\r\n      }\r\n    }\r\n  }\r\n  return match\r\n}\r\n\r\n// we use relative path to avoid canonical path issue - e.g. /tmp vs /private/tmp\r\nfunction copyFiltered(src: string, destination: string, patterns: Array<Minimatch>, dereference: boolean = false, ignoreFiles?: Set<string>): Promise<any> {\r\n  return copy(src, destination, {\r\n    dereference: dereference,\r\n    filter: it => {\r\n      if (src === it) {\r\n        return true\r\n      }\r\n      let relative = it.substring(src.length + 1)\r\n\r\n      // yes, check before path sep normalization\r\n      if (ignoreFiles != null && ignoreFiles.has(relative)) {\r\n        return false\r\n      }\r\n\r\n      if (path.sep === \"\\\\\") {\r\n        relative = relative.replace(/\\\\/g, \"/\")\r\n      }\r\n      return minimatchAll(relative, patterns)\r\n    }\r\n  })\r\n}\r\n\r\nexport function computeEffectiveTargets(rawList: Array<string>, targetsFromMetadata: Array<string> | n): Array<string> {\r\n  let targets = normalizeTargets(rawList.length === 0 ? targetsFromMetadata : rawList)\r\n  return targets == null ? [\"default\"] : targets\r\n}\r\n\r\nasync function listDependencies(appDir: string, production: boolean): Promise<Array<string>> {\r\n  let npmExecPath = process.env.npm_execpath || process.env.NPM_CLI_JS\r\n  const npmExecArgs = [\"ls\", production ? \"--production\" : \"--dev\", \"--parseable\"]\r\n  if (npmExecPath == null) {\r\n    npmExecPath = process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\r\n  }\r\n  else {\r\n    npmExecArgs.unshift(npmExecPath)\r\n    npmExecPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\r\n  }\r\n\r\n  const result = (await exec(npmExecPath, npmExecArgs, {\r\n    cwd: appDir,\r\n    stdio: \"inherit\",\r\n    maxBuffer: 1024 * 1024,\r\n  })).trim().split(\"\\n\")\r\n  if (result.length > 0 && !result[0].includes(\"/node_modules/\")) {\r\n    // first line is a project dir\r\n    const lastIndex = result.length - 1\r\n    result[0] = result[lastIndex]\r\n    result.length = result.length - 1\r\n  }\r\n  return result\r\n}"
  ]
}
